这是现在的项目完整代码，现在的问题是用户无法标记管理员对其反馈的回复为已读，操作列没有选项，请修改这个问题，注意如果哪一个文件发生了修改，请给出这个文件的完整代码（不要代码片段），没有发生修改的文件不需要给出，尽量不要改变数据库表的结构 
文件路径: src\app.js
文件名: app.js
文件内容:
const express = require('express');
const hbs = require('hbs');
const route = require('./routers/main');
const bodyParser = require('body-parser');
const session = require('express-session');
const fileUpload = require('express-fileupload');
const path = require('path');
require("./handlebar"); // 自定义handlebars helper

// 1) 新增: 引入 node-cron 用于定时任务
const cron = require('node-cron');

// 2) 引入 Order 模型，用于在定时任务里做统计
const Order = require('./modul/order');

// ========== 新增：引入 sendEmail ========== 
const { sendSimpleEmail, sendEmailWithAttachment } = require('./utils/sendEmail');
// ========== 新增：引入 User 模型，以便找出管理员发邮件 ========== 
const User = require('./modul/user');

// ========== 【移除】Mongoose 相关 ==========
// (注释掉或删除 mongoose.connect(...)、mongoose.connection 等相关监听)

const app = express();

app.use(fileUpload());
app.use(session({
    secret: "restorent_datails",
    resave: false,
    saveUninitialized: true
}));

app.use(bodyParser.urlencoded({
    extended: true
}));
app.use(express.json());

// 路由
app.use('', route);

// 静态文件夹
app.use(express.static(path.join(__dirname, 'public')));
app.use("/static", express.static("public"));

// 模板引擎
app.set("view engine", 'hbs');
app.set("views", path.join(__dirname, 'views'));
hbs.registerPartials(path.join(__dirname, 'views', 'partials'));

// 注册 and 辅助函数
hbs.registerHelper('and', function() {
    // 移除最后一个参数（handlebars 的选项对象）
    const args = Array.prototype.slice.call(arguments, 0, -1);
    return args.every(Boolean);
});

// =============================
// 定时任务 - 每周日自动生成销售摘要
// =============================
cron.schedule('0 0 * * 0', async () => {
    try {
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

        // 调用我们在 Order 模块里编写的“按时间筛选订单”方法
        const recentOrders = await Order.findByTimeRange(oneWeekAgo); 
        let totalSales = 0;
        let totalOrders = recentOrders.length;
        let dishCountMap = {};

        recentOrders.forEach(order => {
            const orderTotal = order.price * order.quantity;
            totalSales += orderTotal;
            const key = order.dname || "未命名菜品";
            if (!dishCountMap[key]) {
                dishCountMap[key] = 0;
            }
            dishCountMap[key] += order.quantity;
        });

        // 找出最畅销菜品
        let popularDish = "";
        let maxCount = 0;
        for (let dishName in dishCountMap) {
            if (dishCountMap[dishName] > maxCount) {
                maxCount = dishCountMap[dishName];
                popularDish = dishName;
            }
        }

        let reportText = `
【周报 - 最近7天】
- 订单总数：${totalOrders} 单
- 总销售额：￥${totalSales.toFixed(2)}
- 最畅销菜品：${popularDish} (销量 ${maxCount})
`;
        console.log("===== 每周销售摘要(控制台) =====");
        console.log(reportText);

        // 给所有管理员发送邮件
        const admins = await User.findByType('admin');
        for (let admin of admins) {
            await sendSimpleEmail(admin.email, "【每周报告】餐厅周度总结", reportText);
        }

    } catch (error) {
        console.error("生成每周销售摘要时出错:", error);
    }
});

// =============================
// 定时任务 - 每月1日自动生成月报
// =============================
cron.schedule('0 0 1 * *', async () => {
    try {
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - 30);

        const ordersInPeriod = await Order.findByTimeRange(startDate);
        let totalSales = 0;
        let totalOrders = ordersInPeriod.length;
        let dishCountMap = {};

        ordersInPeriod.forEach(o => {
            totalSales += (o.price * o.quantity);
            const key = o.dname || "未命名菜品";
            if (!dishCountMap[key]) {
                dishCountMap[key] = 0;
            }
            dishCountMap[key] += o.quantity;
        });

        let popularDish = "";
        let maxCount = 0;
        for (let dishName in dishCountMap) {
            if (dishCountMap[dishName] > maxCount) {
                maxCount = dishCountMap[dishName];
                popularDish = dishName;
            }
        }

        const reportText = `
【月报 - 最近30天】
- 订单总数：${totalOrders} 单
- 总销售额：￥${totalSales.toFixed(2)}
- 最畅销菜品：${popularDish} (销量 ${maxCount})
`;
        console.log("===== 每月销售摘要(控制台) =====");
        console.log(reportText);

        const admins = await User.findByType('admin');
        for (let admin of admins) {
            await sendSimpleEmail(admin.email, "【每月报告】餐厅月度总结", reportText);
        }
    } catch (err) {
        console.error("生成每月报告时出错:", err);
    }
});

app.listen(5656, () => {
    console.log('服务器已启动，端口号：5656...');
});

==================================================
文件路径: src\database.js
文件名: database.js
文件内容:
const mysql = require('mysql2/promise');

// 创建连接池
const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: '#gmrGMR110202', // 如果有密码请在此处填写
    database: 'online-food-ordering-system',
    // 可自行添加其他参数，如 connectionLimit
});

module.exports = { pool };

==================================================
文件路径: src\demo.js
文件名: demo.js
文件内容:
const express = require("express");
const app = express();

app.get("/", (req, res) => {
    res.send("<h2>你好，这里是测试Demo</h2>");
    console.log("访问了demo服务器根路径");
});

app.listen(3232, () => {
    console.log("Demo 服务器已启动，端口号：3232...");
});

==================================================
文件路径: src\handlebar.js
文件名: handlebar.js
文件内容:
const { handlebars } = require("hbs");

// 已有的helper
handlebars.registerHelper('times', function (n, block) {
    let accum = '';
    for (let i = 1; i <= n; i++){
        accum += block.fn(i);
    }
    return accum;
});
handlebars.registerHelper('nextPage', function (n, block) {
    return Number(n) + 1;
});
handlebars.registerHelper('prevPage', function (n, block) {
    return Number(n) - 1;
});
handlebars.registerHelper('ifnext', function (currentPage, endPage, block) {
    if (Number(currentPage) >= Number(endPage)) {
        return 'disabled';
    } else {
        return false;
    }
});
handlebars.registerHelper('ifprev', function (currentPage, block) {
    if (Number(currentPage) <= 1) {
        return 'disabled';
    } else {
        return false;
    }
});
handlebars.registerHelper("active", function (active, currentPage, block) {
    if (active == currentPage) {
        return 'active';
    } else {
        return false;
    }
});
handlebars.registerHelper('json', function (context) {
    return JSON.stringify(context).replace(/"/g, '&quot;');
});
handlebars.registerHelper('discount', function (price, discount, block) {
    const discountPrice = parseFloat(price - ((price * discount) / 100)).toFixed(2);
    return discountPrice;
});
handlebars.registerHelper("ifStates", function (states, id, block) {
    if (states === "NA") {
        return '<td><a href="/admin/cooking/' + id + '" class="btn states-btn btn-outline-success btn-sm">烹饪中</a></td>';
    } else if (states === "Cooking") {
        return '<td><a href="/admin/deliver/' + id + '" class="btn states-btn btn-outline-warning btn-sm ">派送中</a></td>';
    } else if (states === "Out for delivery.") {
        return '<td><a href="/admin/handover/' + id + '" class="btn states-btn btn-outline-danger btn-sm">订单完成</a></td>';
    } else {
        return '<td><a class="btn btn-outline-dark states-btn btn-sm disabled">已完成</a></td>';
    }
});
handlebars.registerHelper("ifCancelOrder", function (states, id, block) {
    if (states === "NA") {
        return '<a href="/user/cancelOrder/' + id + '" class="main-btn">取消订单</a>';
    }
});
handlebars.registerHelper('eq', function (a, b) {
    return a === b;
});

==================================================
文件路径: src\modul\dish.js
文件名: dish.js
文件内容:
const { pool } = require('../database');

module.exports = {

    // 类似 Dish.create(...)
    async create(dishData) {
        const {
            dname, dtype, dprice, dtime,
            photo, discription, ddiscount, dserve
        } = dishData;

        const sql = `
            INSERT INTO dishes
            (dname, dtype, dprice, dtime, photo, discription, ddiscount, dserve)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `;
        const [result] = await pool.query(sql, [
            dname, dtype, dprice, dtime, photo || '',
            discription || '', ddiscount || 0, dserve || 0
        ]);
        return { id: result.insertId, ...dishData };
    },

    // 类似 Dish.find(query).skip(...).limit(...)
    // 这里只做最简单的处理，比如 query 可能是 { dserve: { $gt: 0 } }
    // page, total 用于分页
    async find(query, skip = 0, limit = 9999999) {
        let baseSql = `SELECT * FROM dishes`;
        let whereClauses = [];
        let params = [];

        if (query.dserve && query.dserve.$gt !== undefined) {
            whereClauses.push(`dserve > ?`);
            params.push(query.dserve.$gt);
        }
        if (whereClauses.length) {
            baseSql += ' WHERE ' + whereClauses.join(' AND ');
        }
        // 排序可以按 id DESC 或不排
        baseSql += ` LIMIT ?, ?`;
        params.push(skip, limit);

        const [rows] = await pool.query(baseSql, params);
        return rows;
    },

    // 类似 Dish.findById(...)
    async findById(id) {
        const sql = `SELECT * FROM dishes WHERE id = ?`;
        const [rows] = await pool.query(sql, [id]);
        return rows[0] || null;
    },

    // 统计数量
    async countDocuments(query) {
        let baseSql = `SELECT COUNT(*) as cnt FROM dishes`;
        let whereClauses = [];
        let params = [];
        if (query.dserve && query.dserve.$gt !== undefined) {
            whereClauses.push(`dserve > ?`);
            params.push(query.dserve.$gt);
        }
        if (whereClauses.length) {
            baseSql += ' WHERE ' + whereClauses.join(' AND ');
        }
        const [rows] = await pool.query(baseSql, params);
        return rows[0].cnt;
    },

    // 直接查全表总数
    async countAll() {
        const [rows] = await pool.query(`SELECT COUNT(*) as cnt FROM dishes`);
        return rows[0].cnt;
    },

    // 类似 Dish.deleteOne({ _id: ... })
    async deleteOne(id) {
        const sql = `DELETE FROM dishes WHERE id = ?`;
        const [result] = await pool.query(sql, [id]);
        return result.affectedRows; // >0 表示删除成功
    },

    // 类似 Dish.updateOne({_id:...}, {$set: {...}})
    async updateOne(id, updateData) {
        // 需要根据 updateData 拼接
        let fields = [];
        let values = [];
        if (updateData.dname !== undefined) {
            fields.push(`dname=?`);
            values.push(updateData.dname);
        }
        if (updateData.dtype !== undefined) {
            fields.push(`dtype=?`);
            values.push(updateData.dtype);
        }
        if (updateData.dprice !== undefined) {
            fields.push(`dprice=?`);
            values.push(updateData.dprice);
        }
        if (updateData.dserve !== undefined) {
            fields.push(`dserve=?`);
            values.push(updateData.dserve);
        }
        if (updateData.dtime !== undefined) {
            fields.push(`dtime=?`);
            values.push(updateData.dtime);
        }
        if (updateData.ddiscount !== undefined) {
            fields.push(`ddiscount=?`);
            values.push(updateData.ddiscount);
        }
        if (updateData.discription !== undefined) {
            fields.push(`discription=?`);
            values.push(updateData.discription);
        }
        if (updateData.photo !== undefined) {
            fields.push(`photo=?`);
            values.push(updateData.photo);
        }

        if (!fields.length) return; // 无更新字段

        const sql = `UPDATE dishes SET ${fields.join(', ')} WHERE id = ?`;
        values.push(id);

        const [result] = await pool.query(sql, values);
        return result.affectedRows;
    },

    // 供搜索用
    async searchByName(keyword) {
        const sql = `
          SELECT * FROM dishes
          WHERE dserve > 0 AND dname LIKE ?
        `;
        const [rows] = await pool.query(sql, [`%${keyword}%`]);
        return rows;
    }

};

==================================================
文件路径: src\modul\favourite.js
文件名: favourite.js
文件内容:
const { pool } = require('../database');

module.exports = {

    // 类似 Favourite.findOne({ userId, dishId })
    async findOne(userId, dishId) {
        const sql = `SELECT * FROM favourites WHERE userId=? AND dishId=?`;
        const [rows] = await pool.query(sql, [userId, dishId]);
        return rows[0] || null;
    },

    // 类似 Favourite.create(...)
    async create(data) {
        const { userId, dishId } = data;
        const sql = `
            INSERT INTO favourites (userId, dishId, createdAt)
            VALUES (?, ?, NOW())
        `;
        const [result] = await pool.query(sql, [userId, dishId]);
        return { id: result.insertId, ...data };
    },

    // 类似 Favourite.find({ userId: xxx })
    async findByUser(userId) {
        const sql = `SELECT * FROM favourites WHERE userId=? ORDER BY createdAt DESC`;
        const [rows] = await pool.query(sql, [userId]);
        return rows;
    }
};

==================================================
文件路径: src\modul\feedback.js
文件名: feedback.js
文件内容:
const { pool } = require('../database');

module.exports = {

    // 新增评价
    async create(data) {
        const {
            orderId, userId, rating, comment
        } = data;
        const sql = `
            INSERT INTO feedbacks
            (orderId, userId, rating, comment, createdAt, updatedAt, adminReply, adminReplyCreatedAt, adminReplyRead)
            VALUES (?, ?, ?, ?, NOW(), NOW(), '', NULL, 0)
        `;
        const [result] = await pool.query(sql, [
            orderId, userId, rating, comment
        ]);
        return { id: result.insertId, ...data };
    },

    // 查找是否有已有评价
    async findOne(orderId, userId) {
        const sql = `SELECT * FROM feedbacks WHERE orderId=? AND userId=?`;
        const [rows] = await pool.query(sql, [orderId, userId]);
        return rows[0] || null;
    },

    // 更新已有评价
    async updateFeedback(orderId, userId, rating, comment) {
        const sql = `
            UPDATE feedbacks
            SET rating=?, comment=?, updatedAt=NOW()
            WHERE orderId=? AND userId=?
        `;
        const [result] = await pool.query(sql, [rating, comment, orderId, userId]);
        return result.affectedRows;
    },

    // 仅用于 findById
    async findById(id) {
        const sql = `SELECT * FROM feedbacks WHERE id=?`;
        const [rows] = await pool.query(sql, [id]);
        return rows[0] || null;
    },

    async saveAdminReply(feedbackId, replyText) {
        const sql = `
            UPDATE feedbacks
            SET adminReply=?, adminReplyCreatedAt=NOW(), adminReplyRead=0
            WHERE id=?
        `;
        const [result] = await pool.query(sql, [replyText, feedbackId]);
        return result.affectedRows;
    },

    async markRead(feedbackId) {
        const sql = `
            UPDATE feedbacks
            SET adminReplyRead=1
            WHERE id=?
        `;
        await pool.query(sql, [feedbackId]);
    },

    // 根据若干查询条件去找
    // dishId => 先找 orders ？(在 routes 里做也行)
    // 此处直接给出 findAll, 再由路由层自己判断
    async findAll() {
        const sql = `SELECT * FROM feedbacks ORDER BY createdAt DESC`;
        const [rows] = await pool.query(sql);
        return rows;
    },

    // 按指定条件找
    async findByCondition(whereClause, params) {
        let sql = `SELECT * FROM feedbacks`;
        if(whereClause) {
            sql += ` WHERE ${whereClause}`;
        }
        sql += ` ORDER BY createdAt DESC`;
        const [rows] = await pool.query(sql, params);
        return rows;
    }
};

==================================================
文件路径: src\modul\order.js
文件名: order.js
文件内容:
const { pool } = require('../database');

module.exports = {

    // 创建订单
    async create(data) {
        const {
            dishId, userId, time, pickupTime, specialRequests, 
            photo, dname, price, quantity, paymentType, states
        } = data;
        const sql = `
            INSERT INTO orders
            (dishId, userId, time, pickupTime, specialRequests,
             photo, dname, price, quantity, paymentType, states)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `;
        const [result] = await pool.query(sql, [
            dishId, userId, time, pickupTime,
            specialRequests || '', photo || '', dname || '',
            price || 0, quantity || 1, paymentType || '',
            states || 'NA'
        ]);
        return { id: result.insertId, ...data };
    },

    // 按 id 找
    async findById(id) {
        const sql = `SELECT * FROM orders WHERE id=?`;
        const [rows] = await pool.query(sql, [id]);
        return rows[0] || null;
    },

    // 删除 (取消订单)
    async deleteOne(id, userId) {
        const sql = `DELETE FROM orders WHERE id=? AND userId=?`;
        const [result] = await pool.query(sql, [id, userId]);
        return result.affectedRows;
    },

    // 更新 (修改 states 等)
    async updateOne(id, updateData) {
        let fields = [];
        let values = [];

        if (updateData.states !== undefined) {
            fields.push(`states=?`);
            values.push(updateData.states);
        }
        if (updateData.pickupTime !== undefined) {
            fields.push(`pickupTime=?`);
            values.push(updateData.pickupTime);
        }
        // 可按需增加其他字段更新

        if(!fields.length) return;
        const sql = `UPDATE orders SET ${fields.join(', ')} WHERE id=?`;
        values.push(id);
        const [r] = await pool.query(sql, values);
        return r.affectedRows;
    },

    // 查找(支持 states != 'Order completed.')
    // 同时支持分页排序
    async find(filter = {}, sortField = 'pickupTime', sortOrder = 'ASC', skip=0, limit=999999) {
        let sql = `SELECT * FROM orders`;
        let wheres = [];
        let params = [];

        // 若指定 userId
        if(filter.userId !== undefined) {
            wheres.push(`userId=?`);
            params.push(filter.userId);
        }
        // 若指定 statesNe => states <> 'xxx'
        if(filter.statesNe !== undefined) {
            wheres.push(`states<>?`);
            params.push(filter.statesNe);
        }
        // 若指定 states= 'Order completed.'
        if(filter.states === 'Order completed.') {
            wheres.push(`states='Order completed.'`);
        }

        if(wheres.length) {
            sql += ' WHERE ' + wheres.join(' AND ');
        }
        // 排序
        sql += ` ORDER BY ${sortField} ${sortOrder}`;
        // 分页
        sql += ` LIMIT ?,?`;
        params.push(skip, limit);

        const [rows] = await pool.query(sql, params);
        return rows;
    },

    // 统计行数
    async count(filter = {}) {
        let sql = `SELECT COUNT(*) as cnt FROM orders`;
        let wheres = [];
        let params = [];

        if(filter.userId !== undefined) {
            wheres.push(`userId=?`);
            params.push(filter.userId);
        }
        if(filter.statesNe !== undefined) {
            wheres.push(`states<>?`);
            params.push(filter.statesNe);
        }
        if(filter.states === 'Order completed.') {
            wheres.push(`states='Order completed.'`);
        }

        if(wheres.length) {
            sql += ' WHERE ' + wheres.join(' AND ');
        }
        const [rows] = await pool.query(sql, params);
        return rows[0].cnt;
    },

    // 用于每周/每月报表: 找 time >= X
    // time 存 DATETIME，比较时可将 JS Date => MySQL datetime
    async findByTimeRange(startDate) {
        const startStr = formatDateTime(startDate);
        const sql = `SELECT * FROM orders WHERE time >= ?`;
        const [rows] = await pool.query(sql, [startStr]);
        return rows;
    }
};

// 工具函数：简单时间格式化(yyyy-mm-dd hh:mm:ss)
function formatDateTime(dt) {
    let yyyy = dt.getFullYear();
    let mm = String(dt.getMonth()+1).padStart(2, '0');
    let dd = String(dt.getDate()).padStart(2, '0');
    let hh = String(dt.getHours()).padStart(2, '0');
    let mi = String(dt.getMinutes()).padStart(2, '0');
    let ss = String(dt.getSeconds()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${mi}:${ss}`;
}

==================================================
文件路径: src\modul\user.js
文件名: user.js
文件内容:
const { pool } = require('../database');

module.exports = {

    // 注册
    async create(userData) {
        const { name, email, phone, password, address, photo, type } = userData;
        const sql = `
            INSERT INTO users
            (name, email, phone, password, address, photo, type)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        `;
        const [result] = await pool.query(sql, [
            name, email, phone, password,
            address, photo || '', type || 'normal'
        ]);
        return { id: result.insertId, ...userData };
    },

    // 根据邮箱+密码找用户(登录)
    async findByEmailAndPassword(email, password) {
        const sql = `SELECT * FROM users WHERE email=? AND password=?`;
        const [rows] = await pool.query(sql, [email, password]);
        return rows[0] || null;
    },

    // 根据id查用户
    async findById(id) {
        const sql = `SELECT * FROM users WHERE id=?`;
        const [rows] = await pool.query(sql, [id]);
        return rows[0] || null;
    },

    // 更新
    async updateOne(id, userData) {
        let fields = [];
        let values = [];

        if (userData.name !== undefined) {
            fields.push(`name=?`);
            values.push(userData.name);
        }
        if (userData.email !== undefined) {
            fields.push(`email=?`);
            values.push(userData.email);
        }
        if (userData.phone !== undefined) {
            fields.push(`phone=?`);
            values.push(userData.phone);
        }
        if (userData.password !== undefined) {
            fields.push(`password=?`);
            values.push(userData.password);
        }
        if (userData.address !== undefined) {
            fields.push(`address=?`);
            values.push(userData.address);
        }
        if (userData.photo !== undefined) {
            fields.push(`photo=?`);
            values.push(userData.photo);
        }
        if (userData.type !== undefined) {
            fields.push(`type=?`);
            values.push(userData.type);
        }

        if(!fields.length) return;

        const sql = `UPDATE users SET ${fields.join(',')} WHERE id=?`;
        values.push(id);
        const [r] = await pool.query(sql, values);
        return r.affectedRows;
    },

    // 取所有
    async findAll() {
        const sql = `SELECT * FROM users ORDER BY id DESC`;
        const [rows] = await pool.query(sql);
        return rows;
    },

    // 根据 type 查
    async findByType(type) {
        const sql = `SELECT * FROM users WHERE type=?`;
        const [rows] = await pool.query(sql, [type]);
        return rows;
    }
};

==================================================
文件路径: src\routers\main.js
文件名: main.js
文件内容:
const { Router } = require('express');
const express = require('express');
const route = express.Router();
const path = require('path');
const fs = require('fs');
const { pool } = require('../database'); // 若需要直接用 pool.query 统计
// 数据模型
const User = require('../modul/user');
const Dish = require("../modul/dish");
const Order = require('../modul/order');
const Favourite = require('../modul/favourite');
const Feedback = require('../modul/feedback');

// 新增：引入邮件工具
const { sendSimpleEmail } = require('../utils/sendEmail');

/**
 * 首页
 */
route.get("/", (req, res) => {
    const loginUser = req.session.loginUser;
    res.render("index", {
        loginUser
    });
});

/**
 * 注册、登录、登出
 */
route.get("/register", (req, res) => {
    res.render("registration", {
        loginUser: req.session.loginUser
    });
});
route.get("/login", (req, res) => {
    res.render("login", {
        loginUser: req.session.loginUser
    });
});
route.post("/saveRegistration", async (req, res) => {
    try {
        // 先检查是否已存在
        const allUsers = await User.findAll();
        const existing = allUsers.find(u => u.email === req.body.email);
        if(existing) {
            return res.render("registration", {
                registrationError: "该邮箱已被注册，请更换邮箱。",
                loginUser: req.session.loginUser
            });
        }
        await User.create(req.body);
        res.render("login", {
            newRegister: true
        });
    } catch (error) {
        console.error("注册错误:", error);
        res.render("registration", {
            registrationError: "注册时出现错误，请重试。",
            loginUser: req.session.loginUser
        });
    }
});

route.post("/loginUser", async (req, res) => {
    try {
        const user = await User.findByEmailAndPassword(req.body.email, req.body.password);
        if (!user) {
            // 用户名或密码错误
            return res.render("login", {
                invalid: true,
                email: req.body.email
            });
        }
        // 登录成功
        req.session.loginUser = user;
        res.redirect("/dashboard");
    } catch (error) {
        console.error("登录错误:", error);
        res.render("login", {
            loginError: "登录时出现错误，请重试。"
        });
    }
});

route.get("/logout", (req, res) => {
    req.session.destroy();
    res.render("login", {
        logout: true
    });
});

/**
 * Dashboard 根据角色跳转
 */
route.get("/dashboard", (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser) {
        return res.render("login", { loginFirst: true });
    }
    if (loginUser.type === 'normal') {
        return res.render("normalPages/normalDashboard", { loginUser });
    }
    else if (loginUser.type === 'admin') {
        return res.render("adminPages/adminDashboard", { loginUser });
    }
    else if (loginUser.type === 'employee') {
        return res.render("employeePages/employeeDashboard", { loginUser });
    }
});

/**
 * 菜品列表 & 搜索
 */
route.get("/foods/:page", async (req, res) => {
    const loginUser = req.session.loginUser;
    let page = parseInt(req.params.page) || 1;
    const total = 6;
    const skip = (page - 1) * total;

    // 只显示 dserve>0
    const query = { dserve: { $gt: 0 } };
    const foods = await Dish.find(query, skip, total);
    const count = Math.ceil(await Dish.countDocuments(query) / total);

    res.render("showDishes", {
        loginUser,
        foods,
        count,
        currentPage: page
    });
});

route.post("/searchFood", async (req, res) => {
    try {
        const loginUser = req.session.loginUser;
        const search = req.body.foodSearch || "";
        const foods = await Dish.searchByName(search);
        res.render("showDishes", {
            loginUser,
            foods,
            searchKey: search
        });
    } catch (error) {
        console.error("搜索错误:", error);
        res.render("showDishes", {
            loginUser: req.session.loginUser,
            searchError: "搜索时出现错误。"
        });
    }
});

/**
 * 购物车 - 结算（下单）(仅 normal 用户)
 */
route.get("/user/orderFood", (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'normal') {
        return res.render("login", { loginFirst: true });
    }
    res.render("normalPages/normalCheckout", { loginUser });
});

route.post("/orderNowFromBasket", async (req, res) => {
    try {
        const loginUser = req.session.loginUser;
        if (!loginUser || loginUser.type !== 'normal') {
            return res.status(403).json({
                message: "无权限下单。"
            });
        }

        const basket = JSON.parse(req.body.data);
        const pickupTime = req.body.pickupTime || "";
        const specialRequests = req.body.specialRequests || "";
        const paymentType = req.body.paymentType || "online";

        // 检查库存
        for (const item of basket) {
            // item.id 为前端传递的 dishId
            const dishRecord = await Dish.findById(item.id);
            if (!dishRecord) {
                return res.status(400).json({
                    message: "有菜品不存在或已下架。"
                });
            }
            if (dishRecord.dserve < item.quantity) {
                return res.status(400).json({
                    message: `菜品【${dishRecord.dname}】库存不足，下单失败。`
                });
            }
        }

        // 扣减库存 & 创建订单
        for (const item of basket) {
            const dishRecord = await Dish.findById(item.id);

            // 1) 创建订单
            const orderData = {
                dishId: dishRecord.id,   // 注意用id
                userId: loginUser.id,
                time: new Date(),        // 下单时间
                pickupTime,
                specialRequests,
                photo: dishRecord.photo,
                dname: dishRecord.dname,
                price: dishRecord.dprice,
                quantity: item.quantity,
                paymentType,
                states: "NA"
            };
            await Order.create(orderData);

            // 2) 更新库存
            const newServe = dishRecord.dserve - item.quantity;
            await Dish.updateOne(dishRecord.id, { dserve: newServe });
        }

        return res.status(200).json({
            message: "订单创建成功！"
        });
    } catch (error) {
        console.error("下单错误详情:", error);
        return res.status(500).json({
            message: "下单失败，请重试。",
            error: error.message
        });
    }
});

/**
 * member(普通用户) - 当前订单 / 取消订单 / 订单历史
 */
route.get("/user/orders", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'normal') {
        return res.render("login", { loginFirst: true });
    }
    try {
        // “未完成”的订单
        const data = await Order.find({
            userId: loginUser.id,
            statesNe: "Order completed."
        }, 'pickupTime', 'ASC');
        res.render("normalPages/normalOrders", {
            loginUser,
            orderFood: data
        });
    } catch (err) {
        console.error("获取当前订单错误:", err);
        res.render("normalPages/normalOrders", {
            loginUser,
            orderFood: [],
            fetchError: "获取订单失败。"
        });
    }
});

// 取消订单
route.get("/user/cancelOrder/:id", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'normal') {
        return res.render("login", { loginFirst: true });
    }
    try {
        const order = await Order.findById(req.params.id);
        if (!order) {
            return res.status(404).send("订单不存在。");
        }
        if (order.userId !== loginUser.id) {
            return res.status(403).send("无权操作他人订单。");
        }

        // 判断取餐时间
        if(order.pickupTime){
            const pickupTime = new Date(order.pickupTime);
            const now = new Date();
            const diff = pickupTime.getTime() - now.getTime();
            const minutesDiff = Math.floor(diff / 1000 / 60);
            if(minutesDiff < 30) {
                // 回到当前订单列表
                const orderFood = await Order.find({
                    userId: loginUser.id,
                    statesNe: "Order completed."
                }, 'pickupTime', 'ASC');
                return res.render("normalPages/normalOrders", {
                    loginUser,
                    orderFood,
                    cancelError: "距离取餐时间不足30分钟，无法取消订单。"
                });
            }
        }

        // 允许取消 (删除订单)
        const delCount = await Order.deleteOne(req.params.id, loginUser.id);
        if(delCount > 0) {
            // 重新获取当前未完成订单
            const data = await Order.find({
                userId: loginUser.id,
                statesNe: "Order completed."
            }, 'pickupTime', 'ASC');
            return res.render("normalPages/normalOrders", {
                loginUser,
                orderFood: data,
                cancelOrder: true
            });
        } else {
            return res.status(500).send("无法取消订单。");
        }
    } catch (error) {
        console.error("取消订单错误:", error);
        res.status(500).send("取消订单时出现错误。");
    }
});

// 历史订单
route.get("/user/history", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'normal') {
        return res.render("login", { loginFirst: true });
    }
    try {
        // 查所有订单(无分页, 按pickupTime倒序)
        const data = await Order.find({ userId: loginUser.id }, 'pickupTime', 'DESC');

        // 拿到所有订单ID
        const orderIds = data.map(o => o.id);

        // 找所有 feedback
        let feedbackList = [];
        if(orderIds.length){
            const cond = `orderId IN (${orderIds.join(',')})`;
            feedbackList = await Feedback.findByCondition(cond, []);
        }
        const feedbackMap = {};
        feedbackList.forEach(fb => {
            feedbackMap[fb.orderId] = fb;
        });
        data.forEach(o => {
            o.feedback = feedbackMap[o.id] || null;
        });

        res.render("normalPages/normalHistory", {
            loginUser,
            history: data
        });
    } catch (error) {
        console.error("获取历史订单错误:", error);
        res.render("normalPages/normalHistory", {
            loginUser,
            history: [],
            fetchError: "获取历史订单失败。"
        });
    }
});

/**
 * member - 收藏夹
 */
route.post("/user/addFavourite/:dishId", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'normal') {
        return res.status(403).send("只有普通用户才能收藏。");
    }
    try {
        const found = await Favourite.findOne(loginUser.id, req.params.dishId);
        if (!found) {
            await Favourite.create({
                userId: loginUser.id,
                dishId: req.params.dishId
            });
        }
        return res.json({
            success: true,
            message: "收藏成功"
        });
    } catch (err) {
        console.error("收藏错误:", err);
        return res.status(500).json({
            success: false,
            message: "收藏时出错"
        });
    }
});

route.get("/user/favourites", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'normal') {
        return res.render("login", { loginFirst: true });
    }
    try {
        const favs = await Favourite.findByUser(loginUser.id);
        const dishIds = favs.map(f => f.dishId);
        let favDishes = [];
        if(dishIds.length){
            // 简单查出全部 dish，再筛选
            const allDishes = await Dish.find({});
            favDishes = allDishes.filter(d => dishIds.includes(d.id));
        }
        res.render("normalPages/normalFavourites", {
            loginUser,
            favDishes
        });
    } catch (err) {
        console.error("获取收藏夹错误:", err);
        res.render("normalPages/normalFavourites", {
            loginUser,
            favDishes: [],
            fetchError: "获取收藏夹失败。"
        });
    }
});

/**
 * member - 评价
 */
route.post("/user/feedback", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'normal') {
        return res.render("login", { loginFirst: true });
    }
    try {
        const { orderId, rating, comment } = req.body;
        const existing = await Feedback.findOne(orderId, loginUser.id);
        if(existing) {
            // update
            await Feedback.updateFeedback(orderId, loginUser.id, rating, comment);
        } else {
            // create
            await Feedback.create({
                orderId: parseInt(orderId,10),
                userId: loginUser.id,
                rating: parseInt(rating,10),
                comment
            });
        }
        res.redirect("/user/history");
    } catch (error) {
        console.error("评价错误:", error);
        res.status(500).send("评价失败，请重试。");
    }
});

/**
 * 所有角色都能编辑自己的个人资料
 */
route.get("/user/editProfile", (req, res) => {
    if (!req.session.loginUser) {
        return res.render("login", { loginFirst: true });
    }
    // 无论什么角色，都可用不同模板
    if (req.session.loginUser.type === 'normal') {
        return res.render("normalPages/normalEditProfile", {
            loginUser: req.session.loginUser
        });
    } else if (req.session.loginUser.type === 'admin') {
        // 可以跳到管理员用户列表，这里看需求
        return res.redirect("/admin/users");
    } else {
        // employee
        return res.render("employeePages/employeeEditProfile", {
            loginUser: req.session.loginUser
        });
    }
});

route.post("/user/saveProfile", async (req, res) => {
    if (!req.session.loginUser) {
        return res.render("login", { loginFirst: true });
    }
    const loginUser = req.session.loginUser;
    try {
        let updateData = {...req.body};

        // 如果有上传新头像
        if (req.files && req.files.photo) {
            const { photo } = req.files;
            const imageName = `${Date.now()}_${photo.name}`;
            const uploadDir = path.join(__dirname, '../../public/userImages');
            if (!fs.existsSync(uploadDir)) {
                fs.mkdirSync(uploadDir, { recursive: true });
            }
            const imagePath = path.join(uploadDir, imageName);
            await photo.mv(imagePath);

            updateData.photo = imageName;
        } else {
            // 如果没上传，就不要覆盖
            delete updateData.photo;
        }

        await User.updateOne(loginUser.id, updateData);

        // 重新查一下最新用户信息存到 session
        const newUser = await User.findById(loginUser.id);
        req.session.loginUser = newUser;

        return res.redirect("/dashboard");
    } catch (err) {
        console.error("更新个人资料错误:", err);
        res.status(500).send("更新失败，请稍后再试。");
    }
});

/**
 * manager(=admin) - 菜品管理
 */
route.get("/admin/addDish", (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    res.render("adminPages/adminAddNewDish", { loginUser });
});

route.post("/saveDish", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        if (!req.files || !req.files.photo ||
            !req.body.dname.trim() ||
            req.body.dprice <= 0 ||
            Number(req.body.ddiscount) > 100
        ) {
            return res.render("adminPages/adminAddNewDish", {
                notsave: true,
                loginUser
            });
        }
        const { photo } = req.files;
        const imageName = `${Date.now()}_${photo.name}`;
        const uploadPath = path.join(__dirname, '../../public/dishImages');
        if (!fs.existsSync(uploadPath)) {
            fs.mkdirSync(uploadPath, { recursive: true });
        }
        await photo.mv(path.join(uploadPath, imageName));

        req.body.photo = imageName;
        const newDish = await Dish.create(req.body);
        if (newDish) {
            return res.render("adminPages/adminAddNewDish", {
                save: true,
                loginUser
            });
        } else {
            return res.render("adminPages/adminAddNewDish", {
                notsave: true,
                loginUser
            });
        }
    } catch (error) {
        console.error("保存菜品出错:", error);
        return res.render("adminPages/adminAddNewDish", {
            notsave: true,
            loginUser
        });
    }
});

route.get("/admin/dishMenus/:page", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.render("login", { loginFirst: true });
    }
    let page = parseInt(req.params.page) || 1;
    const total = 6;
    const skip = (page - 1) * total;

    const data = await Dish.find({}, skip, total);
    const totalCount = await Dish.countAll();
    const totalPage = Math.ceil(totalCount / total);

    res.render("adminPages/adminFoodTable", {
        loginUser,
        foods: data,
        currentPage: page,
        count: totalPage
    });
});

route.get('/admin/deleteDish/:id', async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.render("login", { loginFirst: true });
    }
    try {
        const dishToDel = await Dish.findById(req.params.id);
        if (dishToDel && dishToDel.photo) {
            const target = path.join(__dirname, '../../public/dishImages', dishToDel.photo);
            if (fs.existsSync(target)) fs.unlinkSync(target);
        }
        const delResult = await Dish.deleteOne(req.params.id);
        if (delResult > 0) {
            let currentPage = 1;
            const total = 6;
            const foods = await Dish.find({}, 0, total);
            const totalCount = await Dish.countAll();
            const totalPage = Math.ceil(totalCount / total);
            return res.render("adminPages/adminFoodTable", {
                loginUser,
                foods,
                currentPage,
                count: totalPage,
                delete: true
            });
        } else {
            return res.status(500).send("删除失败");
        }
    } catch (err) {
        console.error("删除菜品错误:", err);
        return res.status(500).send("删除时发生错误");
    }
});

route.get("/admin/editDish/:id/:flag", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        const dishData = await Dish.findById(req.params.id);
        if (!dishData) {
            return res.status(404).send("找不到菜品。");
        }
        res.render("adminPages/adminEditDish", {
            food: dishData,
            loginUser
        });
    } catch (error) {
        console.error("编辑菜品错误:", error);
        res.status(500).send("服务器错误。");
    }
});

route.post("/admin/saveEditDish/:id", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        const dishId = req.params.id;
        const oldDish = await Dish.findById(dishId);
        if (!oldDish) {
            return res.redirect("/admin/editDish/" + dishId + "/error");
        }
        // 如果上传了新图片
        if (req.files && req.files.photo) {
            // 删旧
            const oldPath = path.join(__dirname, '../../public/dishImages', req.body.tempImage);
            if (fs.existsSync(oldPath)) fs.unlinkSync(oldPath);

            const { photo } = req.files;
            const imgName = Date.now() + "_" + photo.name;
            await photo.mv(path.join(__dirname, '../../public/dishImages', imgName));
            req.body.photo = imgName;
        } else {
            delete req.body.photo;
        }

        await Dish.updateOne(dishId, req.body);
        return res.redirect("/admin/editDish/" + dishId + "/success");
    } catch (error) {
        console.error("编辑菜品保存时错误:", error);
        return res.redirect("/admin/editDish/" + req.params.id + "/error");
    }
});

/**
 * manager(=admin) - 订单管理
 */
route.get("/admin/adminOrder/:page", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }

    let page = parseInt(req.params.page) || 1;
    const total = 10;
    const skip = (page - 1) * total;

    const orders = await Order.find({}, 'pickupTime', 'ASC', skip, total);
    const totalCount = await Order.count({});
    const totalPage = Math.ceil(totalCount / total);

    // 取 feedback
    const allFeedbacks = await Feedback.findAll();
    const fbMap = {};
    allFeedbacks.forEach(f => {
        fbMap[f.orderId] = f;
    });

    // 取 user
    const allUsers = await User.findAll();
    const userMap = {};
    allUsers.forEach(u => {
        userMap[u.id] = u;
    });

    orders.forEach(o => {
        o.feedback = fbMap[o.id] || null;
        o.user = userMap[o.userId] || {};
    });

    res.render("adminPages/adminOrders", {
        loginUser,
        orders,
        currentPage: page,
        count: totalPage
    });
});

// 更新状态
route.get("/admin/cooking/:id", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        await Order.updateOne(req.params.id, { states: "Cooking" });
        res.redirect("/admin/adminOrder/1");
    } catch (error) {
        console.error("更新为Cooking错误:", error);
        res.status(500).send("更新状态失败");
    }
});
route.get("/admin/deliver/:id", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        await Order.updateOne(req.params.id, { states: "Out for delivery." });
        // 发邮件
        const order = await Order.findById(req.params.id);
        if(order){
            const userInfo = await User.findById(order.userId);
            if(userInfo && userInfo.email){
                const subject = "您的订单已准备好取货";
                const text = `尊敬的${userInfo.name}，您好！
您的订单【${order.dname}】已经准备好取餐啦！
请在指定时间内前往餐厅取货。感谢您的支持！`;
                await sendSimpleEmail(userInfo.email, subject, text);
            }
        }
        res.redirect("/admin/adminOrder/1");
    } catch (error) {
        console.error("更新为Out for delivery错误:", error);
        res.status(500).send("更新状态失败");
    }
});

route.get("/admin/handover/:id", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        await Order.updateOne(req.params.id, { states: "Order completed." });
        res.redirect("/admin/adminOrder/1");
    } catch (error) {
        console.error("更新为完成错误:", error);
        res.status(500).send("更新状态失败");
    }
});

/**
 * ========== 新增：4种更详细的周报、月报 ========== 
 */
function formatDateTime(dt) {
    let y = dt.getFullYear();
    let m = String(dt.getMonth()+1).padStart(2,'0');
    let d = String(dt.getDate()).padStart(2,'0');
    let hh = String(dt.getHours()).padStart(2,'0');
    let mm = String(dt.getMinutes()).padStart(2,'0');
    let ss = String(dt.getSeconds()).padStart(2,'0');
    return `${y}-${m}-${d} ${hh}:${mm}:${ss}`;
}

/**
 * 周报 - 趋势与偏好
 */
route.get("/admin/weeklyTrendReport", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        // 过去7天
        const today = new Date();
        const start = new Date();
        start.setDate(today.getDate() - 7);

        const pickupTimeStr = formatDateTime(start);
        // 1) 订单趋势
        const [trendRows] = await pool.query(
            `SELECT DATE_FORMAT(pickupTime, '%Y-%m-%d') as _id,
                    COUNT(*) as orderCount
             FROM orders
             WHERE pickupTime >= ?
             GROUP BY _id
             ORDER BY _id ASC`,
            [pickupTimeStr]
        );
        const trendData = trendRows.map(r => ({
            _id: r._id,
            orderCount: r.orderCount
        }));

        // 2) 客户偏好(销量前5)
        const [prefRows] = await pool.query(
            `SELECT dname as _id, SUM(quantity) as totalQty
             FROM orders
             WHERE pickupTime >= ?
             GROUP BY dname
             ORDER BY totalQty DESC
             LIMIT 5`,
            [pickupTimeStr]
        );
        const preferenceData = prefRows.map(r => ({
            _id: r._id || '未命名菜品',
            totalQty: r.totalQty
        }));

        res.render("adminPages/adminWeeklyTrendReport", {
            loginUser,
            trendData,
            preferenceData
        });
    } catch (error) {
        console.error("周报 - 趋势与偏好 出错:", error);
        res.status(500).send("生成周报趋势与偏好报告时出错");
    }
});

/**
 * 周报 - 销售
 */
route.get("/admin/weeklySalesReport", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        // 过去7天
        const today = new Date();
        const start = new Date();
        start.setDate(today.getDate() - 7);

        const pickupTimeStr = formatDateTime(start);
        const [rows] = await pool.query(`
            SELECT *
            FROM orders
            WHERE pickupTime >= ?
        `, [pickupTimeStr]);

        const orders = rows;
        const totalOrders = orders.length;
        let totalSales = 0;
        orders.forEach(o => {
            totalSales += (o.price * o.quantity);
        });
        const avgSales = totalOrders > 0 ? (totalSales / totalOrders).toFixed(2) : 0;

        res.render("adminPages/adminWeeklySalesReport", {
            loginUser,
            totalOrders,
            totalSales,
            avgSales
        });
    } catch (error) {
        console.error("周报 - 销售 出错:", error);
        res.status(500).send("生成周报销售报告时出错");
    }
});

/**
 * 月报 - 趋势与偏好
 */
route.get("/admin/monthlyTrendReport", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        // 过去30天
        const today = new Date();
        const start = new Date();
        start.setDate(today.getDate() - 30);

        const pickupTimeStr = formatDateTime(start);
        // 1) 订单趋势
        const [trendRows] = await pool.query(
            `SELECT DATE_FORMAT(pickupTime, '%Y-%m-%d') as _id,
                    COUNT(*) as orderCount
             FROM orders
             WHERE pickupTime >= ?
             GROUP BY _id
             ORDER BY _id ASC`,
            [pickupTimeStr]
        );
        const trendData = trendRows.map(r => ({
            _id: r._id,
            orderCount: r.orderCount
        }));

        // 2) 客户偏好(销量前5)
        const [prefRows] = await pool.query(
            `SELECT dname as _id, SUM(quantity) as totalQty
             FROM orders
             WHERE pickupTime >= ?
             GROUP BY dname
             ORDER BY totalQty DESC
             LIMIT 5`,
            [pickupTimeStr]
        );
        const preferenceData = prefRows.map(r => ({
            _id: r._id || '未命名菜品',
            totalQty: r.totalQty
        }));

        res.render("adminPages/adminMonthlyTrendReport", {
            loginUser,
            trendData,
            preferenceData
        });
    } catch (error) {
        console.error("月报 - 趋势与偏好 出错:", error);
        res.status(500).send("生成月报趋势与偏好报告时出错");
    }
});

/**
 * 月报 - 销售
 */
route.get("/admin/monthlySalesReport", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        // 过去30天
        const today = new Date();
        const start = new Date();
        start.setDate(today.getDate() - 30);

        const pickupTimeStr = formatDateTime(start);
        const [rows] = await pool.query(`
            SELECT *
            FROM orders
            WHERE pickupTime >= ?
        `, [pickupTimeStr]);

        const orders = rows;
        const totalOrders = orders.length;
        let totalSales = 0;
        orders.forEach(o => {
            totalSales += (o.price * o.quantity);
        });
        const avgSales = totalOrders > 0 ? (totalSales / totalOrders).toFixed(2) : 0;

        res.render("adminPages/adminMonthlySalesReport", {
            loginUser,
            totalOrders,
            totalSales,
            avgSales
        });
    } catch (error) {
        console.error("月报 - 销售 出错:", error);
        res.status(500).send("生成月报销售报告时出错");
    }
});

/**
 * 新增：管理员(manager=admin) 可以查看并编辑所有用户
 */
route.get("/admin/users", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        const allUsers = await User.findAll();
        res.render("adminPages/adminUsersList", {
            loginUser,
            users: allUsers,
            editSuccess: req.query.editSuccess
        });
    } catch (err) {
        console.error("获取用户列表失败:", err);
        res.status(500).send("获取用户列表失败");
    }
});
route.get("/admin/editUser/:id", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        const userId = parseInt(req.params.id,10);
        const targetUser = await User.findById(userId);
        if (!targetUser) {
            return res.status(404).send("用户不存在");
        }
        
        res.render("adminPages/adminEditUser", {
            loginUser,
            targetUser
        });
    } catch (err) {
        console.error("管理员编辑用户出错:", err);
        res.status(500).send("服务器错误");
    }
});
route.post("/admin/saveUser/:id", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        const userId = parseInt(req.params.id,10);
        const oldUser = await User.findById(userId);
        if (!oldUser) {
            return res.status(404).send("找不到此用户");
        }

        let updateData = {...req.body};
        if (req.files && req.files.photo) {
            const { photo } = req.files;
            const imageName = `${Date.now()}_${photo.name}`;
            const uploadDir = path.join(__dirname, '../../public/userImages');
            if (!fs.existsSync(uploadDir)) {
                fs.mkdirSync(uploadDir, { recursive: true });
            }
            const imagePath = path.join(uploadDir, imageName);
            await photo.mv(imagePath);

            updateData.photo = imageName;
        } else {
            delete updateData.photo;
        }

        await User.updateOne(userId, updateData);
        res.redirect("/admin/users?editSuccess=1");
    } catch (err) {
        console.error("管理员保存用户资料出错:", err);
        res.status(500).send("更新失败，请稍后再试。");
    }
});

/**
 * 简易报告（示例）
 */
route.get("/admin/reports", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'admin') {
        return res.status(403).send("无权限。");
    }
    try {
        const period = req.query.period || 'week'; // 默认周报
        let startDate;
        if (period === 'month') {
            startDate = new Date();
            startDate.setDate(startDate.getDate() - 30);
        } else {
            // week
            startDate = new Date();
            startDate.setDate(startDate.getDate() - 7);
        }

        // 这里用 order.js 里 findByTimeRange 或直接 pool.query
        const ordersInPeriod = await Order.findByTimeRange(startDate);

        let totalSales = 0;
        let dishCountMap = {};
        ordersInPeriod.forEach(o => {
            totalSales += (o.price * o.quantity);
        });
        const totalOrders = ordersInPeriod.length;

        ordersInPeriod.forEach(o => {
            const key = o.dname || "未命名菜品";
            if (!dishCountMap[key]) {
                dishCountMap[key] = 0;
            }
            dishCountMap[key] += o.quantity;
        });

        let popularDish = "";
        let maxCount = 0;
        for (let dishName in dishCountMap) {
            if (dishCountMap[dishName] > maxCount) {
                maxCount = dishCountMap[dishName];
                popularDish = dishName;
            }
        }

        const reportData = {
            period,
            totalOrders,
            totalSales,
            popularDish,
            popularDishQuantity: maxCount
        };
        
        res.render("adminPages/adminReports", {
            loginUser,
            reportData
        });
    } catch (err) {
        console.error("生成报告时出错:", err);
        res.status(500).send("生成报告失败");
    }
});

/**
 * 反馈相关
 */
route.get("/feedbacks", async (req, res) => {
    const loginUser = req.session.loginUser;
    if(!loginUser){
        return res.render("login", { loginFirst: true });
    }

    const dishId = req.query.dishId || null;
    const onlyMine = req.query.onlyMine === '1';

    try {
        let fbList = [];
        if(loginUser.type === 'admin') {
            // 管理员可看所有，如 dishId 存在则过滤
            if(dishId){
                const allOrders = await Order.find({});
                const relatedOrderIds = allOrders
                  .filter(o=>o.dishId == dishId)
                  .map(o=>o.id);
                if(!relatedOrderIds.length){
                    fbList = [];
                } else {
                    const cond = `orderId IN (${relatedOrderIds.join(',')})`;
                    fbList = await Feedback.findByCondition(cond, []);
                }
            } else {
                fbList = await Feedback.findAll();
            }
        } else if(loginUser.type === 'normal'){
            // 普通用户可看(onlyMine=1)只看自己
            const allOrders = await Order.find({});
            let relevantOrderIds = allOrders.map(o=>o.id);
            if(dishId){
                relevantOrderIds = allOrders.filter(o=>o.dishId == dishId).map(o=>o.id);
            }

            if(onlyMine){
                if(relevantOrderIds.length){
                    const cond = `orderId IN (${relevantOrderIds.join(',')}) AND userId=?`;
                    fbList = await Feedback.findByCondition(cond, [loginUser.id]);
                } else {
                    fbList = [];
                }
            } else {
                // 不仅限自己 => 视需求，这里写成查看全部
                if(dishId){
                    if(!relevantOrderIds.length) fbList=[];
                    else {
                        const cond = `orderId IN (${relevantOrderIds.join(',')})`;
                        fbList = await Feedback.findByCondition(cond, []);
                    }
                } else {
                    fbList = await Feedback.findAll();
                }
            }
        } else {
            return res.send("只有管理员或普通用户可查看反馈。");
        }

        // 为了展示 userName / dname
        const userIds = new Set();
        const orderIds = new Set();
        fbList.forEach(f=>{
            userIds.add(f.userId);
            orderIds.add(f.orderId);
        });
        const allUsers = await User.findAll();
        const userMap = {};
        allUsers.forEach(u=>{ userMap[u.id] = u; });

        const allOrders = await Order.find({});
        const orderMap = {};
        allOrders.forEach(o=>{ orderMap[o.id] = o; });

        fbList.forEach(f=>{
            const u = userMap[f.userId] || {};
            const o = orderMap[f.orderId] || {};
            f.userName = u.name || "未知用户";
            f.dname = o.dname || "未知菜品";
            f.orderTime = o.time || "";
        });

        res.render("feedbacks", {
            loginUser,
            feedbackList: fbList,
            dishId,
            onlyMine
        });
    } catch(err){
        console.error("获取反馈列表出错:", err);
        res.status(500).send("获取反馈失败，请稍后再试。");
    }
});

route.post("/feedbacks/reply", async (req, res)=>{
    const loginUser = req.session.loginUser;
    if(!loginUser || loginUser.type!=='admin'){
        return res.status(403).json({ success:false, message: "只有管理员可回复" });
    }
    try {
        const { feedbackId, replyText } = req.body;
        const fb = await Feedback.findById(feedbackId);
        if(!fb){
            return res.status(404).json({ success:false, message:"找不到该反馈" });
        }
        await Feedback.saveAdminReply(feedbackId, replyText);
        return res.json({ success:true, message:"回复成功" });
    } catch(err){
        console.error("管理员回复反馈出错:", err);
        return res.status(500).json({ success:false, message:"回复失败" });
    }
});

route.post("/feedbacks/markRead", async (req, res)=>{
    const loginUser = req.session.loginUser;
    if(!loginUser || loginUser.type!=='normal'){
        return res.status(403).json({ success:false, message: "只有普通用户可标记为已读" });
    }
    try {
        const { feedbackId } = req.body;
        const fb = await Feedback.findById(feedbackId);
        console.log(fb);
        if(!fb){
            return res.status(404).json({ success:false, message:"找不到该反馈" });
        }
        if(fb.userId !==  parseInt(loginUser.id)){
            return res.status(403).json({ success:false, message:"无权标记他人的反馈" });
        }
        await Feedback.markRead(feedbackId);
        return res.json({ success:true, message:"已标记为已读" });
    } catch(err){
        console.error("标记已读出错:", err);
        return res.status(500).json({ success:false, message:"标记失败" });
    }
});

/**
 * 新增：手动发送“周报”或“月报”的按钮
 */
route.get("/admin/sendWeeklyNow", async (req, res) => {
    const loginUser = req.session.loginUser;
    if(!loginUser || loginUser.type!=='admin'){
        return res.status(403).send("无权限。");
    }
    try {
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate()-7);
        const recentOrders = await Order.findByTimeRange(oneWeekAgo);
        let totalSales = 0;
        let totalOrders = recentOrders.length;
        let dishCountMap = {};
        recentOrders.forEach(order=>{
            totalSales += (order.price*order.quantity);
            const key = order.dname || "未命名菜品";
            if(!dishCountMap[key]) dishCountMap[key]=0;
            dishCountMap[key]+=order.quantity;
        });
        let popularDish = "";
        let maxCount = 0;
        for(let k in dishCountMap){
            if(dishCountMap[k]>maxCount){
                maxCount = dishCountMap[k];
                popularDish = k;
            }
        }
        const reportText=`
【手动发送 - 周报】
- 订单总数：${totalOrders} 单
- 总销售额：￥${totalSales.toFixed(2)}
- 最畅销菜品：${popularDish} (销量 ${maxCount})
`;
        const admins=await User.findByType('admin');
        for(let ad of admins){
            if(ad.email){
                await sendSimpleEmail(ad.email, "【手动周报】餐厅周度总结", reportText);
            }
        }
        res.redirect("/dashboard");
    } catch(e){
        console.error(e);
        res.status(500).send("发送失败，请稍后再试。");
    }
});

route.get("/admin/sendMonthlyNow", async (req, res) => {
    const loginUser = req.session.loginUser;
    if(!loginUser || loginUser.type!=='admin'){
        return res.status(403).send("无权限。");
    }
    try {
        const startDate=new Date();
        startDate.setDate(startDate.getDate()-30);
        const ordersInPeriod=await Order.findByTimeRange(startDate);
        let totalSales=0;
        let totalOrders=ordersInPeriod.length;
        let dishCountMap={};
        ordersInPeriod.forEach(o=>{
            totalSales+=(o.price*o.quantity);
            const key=o.dname||"未命名菜品";
            if(!dishCountMap[key]) dishCountMap[key]=0;
            dishCountMap[key]+=o.quantity;
        });
        let popularDish="";
        let maxCount=0;
        for(let dk in dishCountMap){
            if(dishCountMap[dk]>maxCount){
                maxCount=dishCountMap[dk];
                popularDish=dk;
            }
        }
        const reportText=`
【手动发送 - 月报】
- 订单总数：${totalOrders} 单
- 总销售额：￥${totalSales.toFixed(2)}
- 最畅销菜品：${popularDish} (销量 ${maxCount})
`;
        const admins=await User.findByType('admin');
        for(let ad of admins){
            if(ad.email){
                await sendSimpleEmail(ad.email, "【手动月报】餐厅月度总结", reportText);
            }
        }
        res.redirect("/dashboard");
    } catch(e){
        console.error(e);
        res.status(500).send("发送失败，请稍后再试。");
    }
});

/**
 * staff(=employee) - 订单、历史、库存管理
 */
route.get("/employee/dashboard", (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.status(403).send("无权限。");
    }
    res.render("employeePages/employeeDashboard", { loginUser });
});

// 员工查看当前(未完成)订单
route.get("/employee/orders/:page", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.status(403).send("无权限。");
    }
    let page = parseInt(req.params.page) || 1;
    const limit = 10;
    const skip = (page - 1) * limit;

    // 查 states != 'Order completed.'
    const orders = await Order.find({ statesNe: "Order completed." }, 'pickupTime', 'ASC', skip, limit);
    const totalCount = await Order.count({ statesNe: "Order completed." });

    // 附加 feedback
    const orderIds = orders.map(o => o.id);
    let feedbackList = [];
    if(orderIds.length){
        const cond = `orderId IN (${orderIds.join(',')})`;
        feedbackList = await Feedback.findByCondition(cond, []);
    }
    const fbMap = {};
    feedbackList.forEach(f => {
        fbMap[f.orderId] = f;
    });

    // 附加 user
    const allUsers = await User.findAll();
    const userMap = {};
    allUsers.forEach(u => {
        userMap[u.id] = u;
    });

    orders.forEach(o => {
        o.feedback = fbMap[o.id] || null;
        o.user = userMap[o.userId] || {};
    });

    res.render("employeePages/employeeOrders", {
        loginUser,
        orders,
        currentPage: page,
        count: Math.ceil(totalCount / limit)
    });
});

// 员工更新订单状态
route.post("/employee/updateOrderStatus", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.status(403).json({ message: "无权限。" });
    }
    try {
        const { orderId, status } = req.body;
        let newStatus;
        if (status.toLowerCase() === "in progress") {
            newStatus = "Cooking";
        } else if (status.toLowerCase() === "completed") {
            newStatus = "Order completed.";
        } else {
            return res.status(400).json({ message: "状态无效。" });
        }

        // 更新数据库
        await Order.updateOne(orderId, { states: newStatus });

        // 如果完成 => 发送取餐邮件
        if (newStatus === "Order completed.") {
            const order = await Order.findById(orderId);
            if(order){
                // 再查用户
                const userData = await User.findById(order.userId);
                if(userData && userData.email){
                    const subject = "您的订单已准备好取货";
                    const text = `尊敬的${userData.name}，您好！
您的订单【${order.dname}】已经准备好取餐啦！
请在指定时间内前往餐厅取货。感谢您的支持！`;
                    try {
                        await sendSimpleEmail(userData.email, subject, text);
                    } catch(err){
                        console.error("发送取餐通知邮件失败:", err);
                        // 不让它阻止主流程，可根据需求决定
                    }
                }
            }
        }

        return res.json({ message: "订单状态更新成功。" });
    } catch (error) {
        console.error("员工更新订单状态错误:", error);
        return res.status(500).json({ message: "更新订单状态失败。" });
    }
});

// 员工查看历史订单
route.get("/employee/history/:page", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.status(403).send("无权限。");
    }

    let page = parseInt(req.params.page) || 1;
    const limit = 10;
    const skip = (page - 1) * limit;

    // states = 'Order completed.'
    const orders = await Order.find({ states: "Order completed." }, 'pickupTime', 'DESC', skip, limit);
    const totalCount = await Order.count({ states: "Order completed." });

    // 查 feedback
    const orderIds = orders.map(o => o.id);
    let feedbackList = [];
    if(orderIds.length){
        const cond = `orderId IN (${orderIds.join(',')})`;
        feedbackList = await Feedback.findByCondition(cond, []);
    }
    const fbMap = {};
    feedbackList.forEach(f => {
        fbMap[f.orderId] = f;
    });

    // 用户
    const allUsers = await User.findAll();
    const userMap = {};
    allUsers.forEach(u => {
        userMap[u.id] = u;
    });

    orders.forEach(o => {
        o.feedback = fbMap[o.id] || null;
        o.user = userMap[o.userId] || {};
    });

    res.render("employeePages/employeeHistory", {
        loginUser,
        history: orders,
        currentPage: page,
        count: Math.ceil(totalCount / limit)
    });
});

// 员工库存管理
route.get("/employee/markOutOfStock", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.status(403).send("无权限。");
    }
    const allDishes = await Dish.find({}, 0, 9999999);
    // 按 dname 排序
    allDishes.sort((a,b)=> (a.dname||"").localeCompare(b.dname||""));

    res.render("employeePages/employeeManageInventory", {
        loginUser,
        dishes: allDishes
    });
});

route.post("/employee/markOutOfStock", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.status(403).json({ message: "无权限。" });
    }
    try {
        const { dishId } = req.body;
        const dish = await Dish.findById(dishId);
        if (!dish) {
            return res.status(404).json({ message: "未找到该菜品。" });
        }

        // 标记为0
        await Dish.updateOne(dishId, { dserve: 0 });

        // 给所有 employee + admin 发邮件（可直接写 pool.query 或循环两次）
        const [rows] = await pool.query("SELECT * FROM users WHERE type IN ('employee','admin')");
        const subject = "【缺货警告】有菜品库存为0";
        const text = `警告：菜品【${dish.dname}】已缺货（库存=0）。请及时处理或补货！`;
        for (let u of rows) {
            if (u.email) {
                await sendSimpleEmail(u.email, subject, text);
            }
        }

        res.json({ message: "该菜品已标记为缺货，并已发送邮件通知所有员工和管理员。" });
    } catch (err) {
        console.error("标记缺货出错:", err);
        res.status(500).json({ message: "标记缺货失败。" });
    }
});

route.post("/employee/restock", async (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.status(403).json({ message: "无权限。" });
    }
    try {
        const { dishId, quantity } = req.body;
        const qty = parseInt(quantity);
        if (isNaN(qty) || qty < 1) {
            return res.status(400).json({ message: "补货数量无效。" });
        }
        await Dish.updateOne(dishId, { dserve: qty });
        res.json({ message: "该菜品已成功补货为 " + qty + " 份。" });
    } catch (err) {
        console.error("补货错误:", err);
        res.status(500).json({ message: "补货失败。" });
    }
});

/**
 * ========== 员工编辑个人资料单独写在这里（也可复用 /user/editProfile） ==========
 */
route.get("/employee/editProfile", (req, res) => {
    const loginUser = req.session.loginUser;
    if (!loginUser || loginUser.type !== 'employee') {
        return res.render("login", { loginFirst: true });
    }
    res.render("employeePages/employeeEditProfile", {
        loginUser
    });
});

module.exports = route;

==================================================
文件路径: src\utils\sendEmail.js
文件名: sendEmail.js
文件内容:
const nodemailer = require('nodemailer');
const path = require('path');

// 创建一个 SMTP 传输对象
const transporter = nodemailer.createTransport({
  service: 'gmail', 
  host: 'smtp.gmail.com',
  port: 587,
  secure: false,
  auth: {
    user: 'starkwilion@gmail.com', 
    pass: 'azif fgfj suei pujr'
  }
});

// 发送邮件辅助函数 (无附件)
const sendSimpleEmail = async (to, subject, text) => {
  const mailOptions = {
    from: {
      name: 'Stark',
      address: 'starkwilion@gmail.com'
    },
    to: to,  
    subject: subject, 
    text: text 
  };
  const info = await transporter.sendMail(mailOptions);
  console.log('Email sent: ' + info.response);
};

// 发送邮件辅助函数 (带附件)
const sendEmailWithAttachment = async (to, subject, text, attachmentPath) => {
  const mailOptions = {
    from: {
      name: 'Stark',
      address: 'starkwilion@gmail.com'
    },
    to: to, 
    subject: subject, 
    text: text,
    attachments: [
      {
        filename: path.basename(attachmentPath),
        path: attachmentPath, 
        contentType: 'application/pdf'
      }
    ]
  };
  const info = await transporter.sendMail(mailOptions);
  console.log('Email sent: ' + info.response);
};

module.exports = { sendSimpleEmail, sendEmailWithAttachment };

==================================================
文件路径: src\views\feedbacks.hbs
文件名: feedbacks.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>用户反馈</title>
</head>
<body>
  {{> navbar loginUser=loginUser}}

  <section class="container-fluid" style="min-height: 85vh; padding-top: 70px;">
    <div class="container">
      <h3 class="mb-3">用户反馈列表</h3>

      <!-- 顶部一些过滤按钮示例 -->
      <form method="get" action="/feedbacks" class="d-flex align-items-center mb-3">
        {{#if dishId}}
        <input type="hidden" name="dishId" value="{{dishId}}">
        {{/if}}
        {{#if (eq loginUser.type 'normal')}}
        <label class="me-2">只看我的反馈:</label>
        <input type="checkbox" name="onlyMine" value="1" {{#if onlyMine}}checked{{/if}} 
               onchange="this.form.submit()">
        {{/if}}
      </form>

      <!-- 若 dishId 存在，也可在这里加一句提示 -->
      {{#if dishId}}
        <p class="text-info">仅显示与本菜品(ID={{dishId}})相关的订单反馈</p>
      {{/if}}

      <table class="table table-striped">
        <thead>
          <tr>
            <th>菜名</th>
            <th>用户</th>
            <th>评分</th>
            <th>评论</th>
            <th>反馈时间</th>
            <th>管理员回复</th>
            <th>操作</th>
          </tr>
        </thead>
        <tbody>
          {{#each feedbackList}}
          <tr>
            <td>{{this.dname}}</td>
            <td>{{this.userName}}</td>
            <td>{{this.rating}} 星</td>
            <td>{{this.comment}}</td>
            <td>{{this.createdAt}}</td>

            <td>
              {{#if this.adminReply}}
                <p>{{this.adminReply}}</p>
                <small class="text-secondary">
                  回复时间:
                  {{#if this.adminReplyCreatedAt}}
                    {{this.adminReplyCreatedAt}}
                  {{else}}
                    未记录
                  {{/if}}
                </small>
                <!-- 若我是这个反馈的用户 && adminReplyRead=false，则显示【未读】提示 -->
                {{#if (eq this.userId ../loginUser._id)}}
                  {{#if (eq this.adminReplyRead false)}}
                    <div class="text-danger">【管理员回复未读】</div>
                  {{/if}}
                {{/if}}
              {{else}}
                <span class="text-muted">暂无回复</span>
              {{/if}}
            </td>

            <td>
              <!-- 若我是管理员 => 显示回复或修改回复表单 -->
              {{#if (eq ../loginUser.type 'admin')}}
                <button class="btn btn-sm btn-primary"
                        onclick="openReplyModal('{{this.id}}','{{this.adminReply}}')">
                  回复
                </button>
              {{/if}}

              <!-- 若我是该反馈的用户且有回复未读 => 显示“标记已读” -->
              {{#if (eq ../loginUser.type 'normal')}}
                {{#if (eq this.userId ../loginUser._id)}}
                  {{#if (and this.adminReply (eq this.adminReplyRead false))}}
                    <button class="btn btn-sm btn-success"
                            onclick="markReplyRead('{{this.id}}')">
                      标记已读
                    </button>
                  {{/if}}
                {{/if}}
              {{/if}}
            </td>
          </tr>
          {{/each}}
        </tbody>
      </table>

      {{#unless feedbackList.length}}
      <p class="text-center text-muted">暂时没有相关反馈</p>
      {{/unless}}
    </div>
  </section>

  <!-- 管理员回复弹窗 -->
  <div class="modal fade" id="replyModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">管理员回复</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="关闭"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="feedbackId">
          <div class="mb-3">
            <label class="form-label">回复内容</label>
            <textarea class="form-control" rows="3" id="replyText"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
          <button class="btn btn-primary" onclick="submitReply()">提交</button>
        </div>
      </div>
    </div>
  </div>

<script>
  // 打开管理员回复的Modal
  function openReplyModal(fbId, existingReply) {
    document.getElementById('feedbackId').value = fbId;
    document.getElementById('replyText').value = existingReply || '';
    const modal = new bootstrap.Modal(document.getElementById('replyModal'));
    modal.show();
  }

  // 提交管理员回复
  async function submitReply() {
    const fbId = document.getElementById('feedbackId').value;
    const text = document.getElementById('replyText').value.trim();
    if(!text) {
      Swal.fire('提示','请输入回复内容','info');
      return;
    }
    try {
        console.log(fbId, text);
      const resp = await fetch('/feedbacks/reply', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ feedbackId: fbId, replyText: text })
      });
      const result = await resp.json();
      if(result.success) {
        Swal.fire('成功', '回复已提交', 'success').then(()=>{
          window.location.reload();
        });
      } else {
        Swal.fire('错误', result.message || '回复失败', 'error');
      }
    } catch(e) {
      console.error(e);
      Swal.fire('错误', '网络异常，请稍后再试','error');
    }
  }

  // 普通用户标记回复已读
  async function markReplyRead(fbId){
    try {
      const resp = await fetch('/feedbacks/markRead', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ feedbackId: fbId })
      });
      const result = await resp.json();
      if(result.success){
        Swal.fire('成功', '已标记为已读','success').then(()=>{
          window.location.reload();
        });
      } else {
        Swal.fire('错误', result.message || '标记失败','error');
      }
    } catch(e){
      console.error(e);
      Swal.fire('错误', '网络异常，请稍后再试','error');
    }
  }
</script>

</body>
</html>

==================================================
文件路径: src\views\index.hbs
文件名: index.hbs
文件内容:
<!doctype html>
<html lang="zh-CN">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>美食订餐 - 首页</title>
</head>

<body>
  {{> navbar loginUser=loginUser}}

  <!-- 首屏横幅 - 游客可浏览的首页，包含欢迎标语、导航按钮等 -->
  <section id="/">
    <div class="container-fluid px-0 top-banner">
      <div class="container">
        <div class="row">
          <div class="col-lg-5 col-md-6">
            <h1>欢迎来到美食订餐系统</h1>
            <p>在这里，您可以浏览我们的精美菜品并随时随地下单。</p>
            <div class="mt-4">
              <!-- “立即点餐”按钮 -->
              <button class="main-btn" onclick="window.location.href='/foods/1'">立即点餐 <i class="fas fa-shopping-basket ps-3"></i></button>
              <!-- “立即注册”按钮 -->
              <button class="white-btn" onclick="window.location.href='/register'">立即注册 <i class="fas fa-angle-right ps-3"></i></button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- 关于我们或其他介绍性版块（示例） -->
  <section id="about" class="my-5">
    <div class="container">
      <div class="row">
        <div class="col-md-7">
          <img src="/static/image/img/img-1.png" class="img-fluid py-2" alt="美食图片">
        </div>
        <div class="col-md-5 mt-md-5 mt-1">
          <h2>健康与美味，我们都为您准备好了</h2>
          <p>我们的厨师团队只选用最新鲜的食材，为您呈现口味与品质兼具的佳肴。</p>
          <button class="main-btn" onclick="window.location.href='/foods/1'">查看菜品</button>
        </div>
      </div>
    </div>
  </section>

  <!-- 底部示例 -->
  <section id="footer">
    <div class="text-center p-4 bg-light">
      <a href="/register" class="mx-2">注册</a>
      <a href="/login" class="mx-2">登录</a>
      <a href="/foods/1" class="mx-2">浏览菜品</a>
      <br><br>
      <small class="mt-5 text-muted">Copyright © 
        <script>document.write(new Date().getFullYear())</script> 
        美食订餐系统. 保留所有权利.
      </small>
    </div>
  </section>
</body>
</html>

==================================================
文件路径: src\views\login.hbs
文件名: login.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>登录 - 美食订餐</title>
</head>

<body>
    {{> navbar}}

    <section class="container-fluid">
        <div class="register-banner">
            <div class="container">
                <div class="row mb-5 pb-5">
                    <div class="col-md-6 mt-5 mb-5">
                        <div class="register-form p-4 shadow">
                            <div class="text-center">
                                <h2 class="primary-color">用户登录</h2>
                            </div>
                            <form class="form" action="/loginUser" method="post">
                                <div class="mx-2">
                                    <input type="text" class="form-control mt-3" name="email" placeholder="请输入邮箱" required>
                                    <input type="password" class="form-control mt-3" name="password" placeholder="请输入密码" required>
                                </div>
                                <div class="text-end">
                                    <button type="submit" class="main-btn mt-3 mx-4 mb-1">登录</button>
                                </div>
                            </form>

                            <div class="mt-3 text-center">
                              <small>还没有账号？ <a href="/register">前往注册</a></small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        {{#if invalid}}
        <script>
            Swal.fire({
                title: '登录失败',
                text: '邮箱或密码不正确，请重试。',
                icon: 'error',
                confirmButtonText: '好的'
            });
        </script>
        {{/if}}

        {{#if logout}}
        <script>
            Swal.fire({
                title: '退出成功',
                icon: 'success',
                confirmButtonText: '好的'
            });
        </script>
        {{/if}}

        {{#if loginFirst}}
        <script>
            Swal.fire({
                title: '请先登录',
                text: '您尚未登录，请先登录再访问。',
                icon: 'info',
                confirmButtonText: '好的'
            });
        </script>
        {{/if}}

        {{#if newRegister}}
        <script>
            Swal.fire({
                title: '注册成功！',
                text: '请使用您的邮箱和密码登录。',
                icon: 'success',
                confirmButtonText: '好的'
            });
        </script>
        {{/if}}

    </section>
</body>
</html>

==================================================
文件路径: src\views\paymentCancel.hbs
文件名: paymentCancel.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>支付取消 - 美食订餐</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    {{> navbar loginUser=loginUser}}

    <section>
        <div class="container text-center my-5">
            <h2>支付已取消</h2>
            <p>您的支付已取消。您可以重新选择支付方式或继续浏览菜品。</p>
            <a href="/foods/1" class="btn btn-primary">继续浏览菜品</a>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\paymentSuccess.hbs
文件名: paymentSuccess.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>支付成功 - 美食订餐</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    {{> navbar loginUser=loginUser}}

    <section>
        <div class="container text-center my-5">
            <h2>支付成功！</h2>
            <p>感谢您的订购。您的订单已成功支付，并将在指定时间准备好。</p>
            <a href="/" class="btn btn-primary">返回首页</a>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\registration.hbs
文件名: registration.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>注册 - 美食订餐</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}

    <section class="container-fluid">
        <div class="register-banner">
            <div class="container">
                <div class="row">
                    <div class="col-md-6 my-5">
                        <div class="register-form p-4 shadow">
                            <div class="text-center">
                                <h2 class="primary-color">注册新用户</h2>
                            </div>
                            <form class="form" action="/saveRegistration" method="post">
                                <div class="mx-2">
                                    <input name="name" class="form-control mt-3" placeholder="输入您的姓名" type="text" required>
                                    <input name="email" type="email" placeholder="输入您的邮箱" class="form-control mt-3" required>
                                    <input name="phone" placeholder="输入您的手机号" type="text" class="form-control mt-3" required>
                                    <input name="password" type="password" placeholder="输入您的密码" class="form-control mt-3" required>
                                    <textarea name="address" class="form-control mt-3" placeholder="输入您的收货地址" rows="3" required></textarea>

                                    <!-- 只有 normal / admin / employee 三种选项 -->
                                    <select name="type" class="form-control mt-3" required>
                                        <option value="normal">普通用户</option>
                                        <option value="admin">管理员</option>
                                        <option value="employee">员工</option>
                                    </select>
                                </div>

                                <div class="text-end">
                                    <button type="submit" class="main-btn mt-2 mb-1">立即注册</button>
                                </div>
                            </form>
                        </div>

                        {{#if registrationError}}
                        <script>
                            Swal.fire({
                                title: '注册错误',
                                text: '{{registrationError}}',
                                icon: 'error',
                                confirmButtonText: '好的'
                            });
                        </script>
                        {{/if}}
                    </div>
                </div>
            </div>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\showDishes.hbs
文件名: showDishes.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <title>浏览菜品 - 美食订餐</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
</head>
<body>
  {{> navbar loginUser=loginUser}}

  <section class="container-fluid">
    <div class="container">
      <!-- 搜索框 -->
      <form action="/searchFood" method="post">
        <div class="row search-panel">
          <div class="col-md-5 offset-md-3 mt-4">
            <input
              value="{{searchKey}}"
              placeholder="搜索菜品，例如：汉堡、沙拉"
              class="form-control"
              type="text"
              name="foodSearch"
            />
          </div>
          <div class="col-md-1 text-center mt-4">
            <button type="submit" class="white-btn2">搜索</button>
          </div>
        </div>
      </form>
    </div>

    <div class="container">
      <div class="row my-2">
        {{#each foods}}
        <div class="col-md-4 my-5">
          <div class="card shadow-sm">
            <img
              style="height:210px"
              src="/static/dishImages/{{this.photo}}"
              class="img-fluid mb-2"
              alt="菜品图片"
            />
            <h4 class="p-2">{{this.dname}}</h4>
            <p class="text-color px-2">
              烹饪时间：{{this.dtime}} 分钟 | 可供应份数：{{this.dserve}}
            </p>
            <h2 class="primary-color mb-3 px-2">
              ￥{{#discount this.dprice this.ddiscount}}{{/discount}}
              <del class="text-muted">￥{{this.dprice}}</del>
            </h2>
            <p class="px-2">{{this.discription}}</p>

            <div class="px-2 pb-2">
              {{#if (eq this.dserve 0)}}
                <button class="main-btn" disabled>已售罄</button>
              {{else}}
                <button
                  onclick="addFoodToBasket('{{this.id}}','{{this.dname}}','{{this.dprice}}','{{this.photo}}')"
                  class="main-btn"
                >
                  加入购物车
                </button>
              {{/if}}
              
              <button class="white-btn2 ms-2" onclick="handleFavourite('{{this.id}}')">
                收藏
              </button>

              <button class="white-btn2 ms-2" onclick="window.location.href='/feedbacks?dishId={{this.id}}'">
                查看反馈
              </button>
            </div>
          </div>
        </div>
        {{/each}}
      </div>

      <!-- 分页 -->
      <nav aria-label="Page navigation" class="mt-3 mb-5">
        <ul class="pagination justify-content-end">
          <li class="page-item">
            <a
              class="page-link {{#ifprev currentPage}}{{/ifprev}}"
              href="/foods/{{#prevPage currentPage}}{{/prevPage}}"
              aria-label="Previous"
            >
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
          {{#times count}}
          <li class="page-item">
            <a class="page-link" href="/foods/{{this}}">{{this}}</a>
          </li>
          {{/times}}
          <li class="page-item">
            <a
              class="page-link {{#ifnext currentPage count}}{{/ifnext}}"
              href="/foods/{{#nextPage currentPage}}{{/nextPage}}"
              aria-label="Next"
            >
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </section>

  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
  <script src="/static/js/script.js"></script>

  <script>
    var userType = '{{#if loginUser}}{{loginUser.type}}{{else}}none{{/if}}';

    async function handleFavourite(dishId) {
      if (userType === 'none') {
        Swal.fire({
          icon: 'info',
          title: '请先登录',
          text: '登录后才可收藏菜品。',
          confirmButtonText: '好的'
        });
        return;
      }
      if (userType !== 'normal') {
        Swal.fire({
          icon: 'warning',
          title: '无权限收藏',
          text: '只有普通用户可以收藏菜品。',
          confirmButtonText: '好的'
        });
        return;
      }

      try {
        const response = await fetch(`/user/addFavourite/${dishId}`, {
          method: 'POST'
        });
        if (!response.ok) {
          const errText = await response.text();
          throw new Error(errText);
        }
        const result = await response.json();
        if (result.success) {
          Swal.fire({
            icon: 'success',
            title: '收藏成功',
            text: result.message,
            confirmButtonText: '好的'
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: '收藏失败',
            text: result.message || '请稍后再试。',
            confirmButtonText: '好的'
          });
        }
      } catch (err) {
        Swal.fire({
          icon: 'error',
          title: '收藏失败',
          text: err.message || '请稍后再试。',
          confirmButtonText: '好的'
        });
      }
    }
  </script>
</body>
</html>

==================================================
文件路径: src\views\adminPages\adminAddNewDish.hbs
文件名: adminAddNewDish.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>添加新菜品 - 管理员</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}

    <section>
        <div class="container-fluid">
            <div class="row">
                <!-- 侧边栏 -->
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <h4 class="text-center">添加新菜品</h4>
                        <div class="row">
                            <div class="col-md-8 offset-md-2">
                                <form action="/saveDish" method="post" enctype="multipart/form-data" class="p-3 shadow">
                                    <input name="dname" type="text" class="form-control my-2" placeholder="菜品名称" required>
                                    <input name="dtype" type="text" class="form-control my-2" placeholder="菜品类型，如：主食、甜点等" required>

                                    <div class="row">
                                        <div class="col-md-6">
                                            <input name="dprice" type="number" step="0.01" class="form-control my-2" placeholder="价格 (元)" required>
                                        </div>
                                        <div class="col-md-6">
                                            <input name="dserve" type="number" class="form-control my-2" placeholder="可供应份数" required>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <input name="dtime" type="text" class="form-control my-2" placeholder="烹饪时间 (分钟)">
                                        </div>
                                        <div class="col-md-6">
                                            <input name="ddiscount" type="number" class="form-control my-2" placeholder="折扣 (0-100之间)">
                                        </div>
                                    </div>

                                    <label class="my-2" for="photo">菜品图片：</label>
                                    <input type="file" name="photo" id="photo" required>

                                    <textarea class="form-control my-2" name="discription" rows="3" placeholder="菜品描述，如主要原料、口味等"></textarea>

                                    <div class="text-end">
                                        <button class="main-btn my-2 mx-2">提交</button>
                                    </div>

                                    {{#if save}}
                                    <script>
                                        Swal.fire({
                                            title: '成功',
                                            text: '新菜品已添加！',
                                            icon: 'success',
                                            confirmButtonText: '好的'
                                        })
                                    </script>
                                    {{/if}}

                                    {{#if notsave}}
                                    <script>
                                        Swal.fire({
                                            title: '出错',
                                            text: '请检查表单信息或图片文件，未能成功保存。',
                                            icon: 'error',
                                            confirmButtonText: '好的'
                                        })
                                    </script>
                                    {{/if}}
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
      </section>
</body>
</html>

==================================================
文件路径: src\views\adminPages\adminDashboard.hbs
文件名: adminDashboard.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>管理员面板 - 美食订餐</title>
</head>
<body>
  {{> navbar loginUser=loginUser}}

    <section class="mt-5 pt-4">
        <div class="container-fluid">
            <div class="row">
                <!-- 侧边栏 -->
                <div class="col-md-3">
                   {{> sidebar}}
                </div>
                <!-- 管理员仪表盘内容 -->
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <div class="d-flex align-items-center mb-3">
                            {{#if loginUser.photo}}
                            <img src="/static/userImages/{{loginUser.photo}}" alt="管理员头像" style="width:80px; height:80px; border-radius:50%; margin-right:15px;">
                            {{else}}
                            <img src="/static/image/review/review-1.jpg" alt="默认头像" style="width:80px; height:80px; border-radius:50%; margin-right:15px;">
                            {{/if}}
                            <h4 class="mb-0">管理员仪表盘 - 欢迎您, {{loginUser.name}}</h4>
                        </div>
                        <hr>
                        <div class="row">
                            <!-- 菜品管理卡片 -->
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <img style="width:130px;height:130px;border-radius:50%" src="/static/image/img/d2.jpg" alt="菜品">
                                        <h3 class="my-2 primary-color">菜品管理</h3>
                                        <div class="mt-3">
                                            <a href="/admin/addDish" class="btn btn-primary btn-sm m-1">添加菜品</a>
                                            <a href="/admin/dishMenus/1" class="btn btn-info btn-sm m-1">菜品列表</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- 订单管理卡片 -->
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <img style="width:130px;height:130px;border-radius:50%" src="/static/image/img/chef.jpg" alt="订单">
                                        <h3 class="my-2 primary-color">订单管理</h3>
                                        <div class="mt-3">
                                            <a href="/admin/adminOrder/1" class="btn btn-primary btn-sm">查看订单</a>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 用户管理卡片 -->
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <img style="width:130px;height:130px;border-radius:50%" src="/static/image/img/pizza.jpg" alt="用户">
                                        <h3 class="my-2 primary-color">用户管理</h3>
                                        <div class="mt-3">
                                            <a href="/admin/users" class="btn btn-primary btn-sm">管理用户</a>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 统计报告卡片(示例老版) -->
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <img style="width:130px;height:130px;border-radius:50%" src="/static/image/img/d1.jpg" alt="报告">
                                        <h3 class="my-2 primary-color">统计报告(示例)</h3>
                                        <div class="mt-3">
                                            <a href="/admin/reports?period=week" class="btn btn-info btn-sm m-1">简易周报</a>
                                            <a href="/admin/reports?period=month" class="btn btn-primary btn-sm m-1">简易月报</a>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- 新增：更详细的周报、月报 -->
                            <div class="col-md-8 mb-3">
                                <div class="card">
                                    <div class="card-body">
                                        <h3 class="primary-color">周报 / 月报</h3>
                                        <p>生成更详细的订单趋势、客户偏好和销售数据报告。</p>

                                        <!-- 周报按钮 -->
                                        <div class="mb-3">
                                            <strong>周报：</strong>
                                            <a href="/admin/weeklyTrendReport" class="btn btn-outline-info btn-sm mx-1">趋势与偏好</a>
                                            <a href="/admin/weeklySalesReport" class="btn btn-outline-primary btn-sm mx-1">销售报告</a>
                                        </div>

                                        <!-- 月报按钮 -->
                                        <div class="mb-3">
                                            <strong>月报：</strong>
                                            <a href="/admin/monthlyTrendReport" class="btn btn-outline-info btn-sm mx-1">趋势与偏好</a>
                                            <a href="/admin/monthlySalesReport" class="btn btn-outline-primary btn-sm mx-1">销售报告</a>
                                        </div>

                                        <!-- 新增：倒计时 & 立即发送按钮 -->
                                        <div class="border border-secondary rounded p-3">
                                            <h5>自动发送倒计时</h5>
                                            <p>下次周报发送：<span id="weeklyCountdown" style="color:red;"></span></p>
                                            <p>下次月报发送：<span id="monthlyCountdown" style="color:red;"></span></p>
                                            <div>
                                                <a href="/admin/sendWeeklyNow" class="btn btn-sm btn-warning me-2">立即发送周报</a>
                                                <a href="/admin/sendMonthlyNow" class="btn btn-sm btn-warning">立即发送月报</a>
                                            </div>
                                        </div>
                                        <small class="text-muted">*手动发送不会重置自动发送的定时器</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <p class="text-center mt-3">
                            欢迎来到管理员后台，您可以在此管理菜品、查看订单、管理用户、生成报告等。
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
    /**
     * 这里简单演示：
     *  - 每周日 0点为下次周报
     *  - 每月1日 0点为下次月报
     * 通过前端JS计算与当前时间的差值，只是演示用。
     */
    function getNextSundayMidnight() {
        // 从当前时间开始，找到下一个周日的 00:00
        const now = new Date();
        const day = now.getDay(); // 0是周日
        // 如果今天就是周日，看是否已过00:00
        // 简化起见：假设每周日 00:00
        let daysToSunday = 7 - day;
        if (day === 0) {
            // 表示今天是周日，看看是否过了0点
            // 若已经过0点，就要下个周日
            if (now.getHours() === 0 && now.getMinutes() === 0 && now.getSeconds() === 0) {
                daysToSunday = 0;
            } else {
                daysToSunday = 7; 
            }
        }
        const nextSunday = new Date(now.getTime());
        nextSunday.setDate(now.getDate() + daysToSunday);
        // 设到下个周日 00:00:00
        nextSunday.setHours(0, 0, 0, 0);
        return nextSunday;
    }

    function getNextMonthFirstMidnight() {
        // 找下个月1日 00:00
        const now = new Date();
        let year = now.getFullYear();
        let month = now.getMonth(); // 0-11
        // 如果今天就是1号 00:00，就看是否过
        // 简化，直接算下个月1号
        let nextMonth = (month + 1) % 12;
        let nextYear = year + Math.floor((month + 1) / 12);

        return new Date(nextYear, nextMonth, 1, 0, 0, 0, 0);
    }

    function updateCountdowns() {
        const now = new Date();
        const nextSun = getNextSundayMidnight();
        const diff1 = (nextSun - now) / 1000; // 秒差
        const weeklyDays = Math.floor(diff1 / (3600*24));
        const weeklyHours = Math.floor((diff1 % (3600*24)) / 3600);
        const weeklyMins = Math.floor((diff1 % 3600) / 60);
        const weeklySecs = Math.floor(diff1 % 60);

        document.getElementById('weeklyCountdown').textContent =
            `${weeklyDays}天 ${weeklyHours}小时 ${weeklyMins}分钟 ${weeklySecs}秒`;

        // 月报
        const nextMonthFirst = getNextMonthFirstMidnight();
        const diff2 = (nextMonthFirst - now) / 1000;
        const monthlyDays = Math.floor(diff2 / (3600*24));
        const monthlyHours = Math.floor((diff2 % (3600*24)) / 3600);
        const monthlyMins = Math.floor((diff2 % 3600) / 60);
        const monthlySecs = Math.floor(diff2 % 60);

        document.getElementById('monthlyCountdown').textContent =
            `${monthlyDays}天 ${monthlyHours}小时 ${monthlyMins}分钟 ${monthlySecs}秒`;
    }

    // 每秒更新一次
    setInterval(updateCountdowns, 1000);
    </script>
</body>
</html>

==================================================
文件路径: src\views\adminPages\adminEditDish.hbs
文件名: adminEditDish.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>编辑菜品 - 管理员</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}

    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <h4 class="text-center">编辑菜品</h4>
                        <form action="/admin/saveEditDish/{{food.id}}" method="post" enctype="multipart/form-data" class="p-3 shadow">
                            <div class="row">
                                <div class="col-md-4">
                                    <img src="/static/dishImages/{{food.photo}}" class="img-fluid py-3" alt="菜品图">
                                    <label class="my-2" for="photo">菜品图片：</label>
                                    <input type="hidden" value="{{food.photo}}" name="tempImage">
                                    <input type="file" name="photo" id="photo">
                                </div>
                                <div class="col-md-8">
                                    <input value="{{food.dname}}" name="dname" type="text" class="form-control my-2" placeholder="菜品名称">
                                    <input value="{{food.dtype}}" name="dtype" type="text" class="form-control my-2" placeholder="菜品类型">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <input value="{{food.dprice}}" name="dprice" type="number" step="0.01" class="form-control my-2" placeholder="价格">
                                        </div>
                                        <div class="col-md-6">
                                            <input value="{{food.dserve}}" name="dserve" type="number" class="form-control my-2" placeholder="可供应份数">
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <input value="{{food.dtime}}" name="dtime" type="text" class="form-control my-2" placeholder="烹饪时间(分)">
                                        </div>
                                        <div class="col-md-6">
                                            <input value="{{food.ddiscount}}" name="ddiscount" type="number" class="form-control my-2" placeholder="折扣(0-100)">
                                        </div>
                                    </div>
                                    <textarea class="form-control my-2" name="discription" rows="3">{{food.discription}}</textarea>
                                    <div class="text-end">
                                        <button class="main-btn my-2 mx-2">保存修改</button>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>

                    <script>
                        let urlSplit = window.location.href.split('/');
                        const action = urlSplit[urlSplit.length - 1];
                        if (action == 'success') {
                            Swal.fire({
                                title: '修改成功',
                                text: '菜品信息已更新！',
                                icon: 'success',
                                confirmButtonText: '好的'
                            })
                        } else if (action == 'error') {
                            Swal.fire({
                                title: '出错',
                                text: '保存失败，请检查表单信息。',
                                icon: 'error',
                                confirmButtonText: '好的'
                            })
                        }
                    </script>

                </div>
            </div>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\adminPages\adminEditUser.hbs
文件名: adminEditUser.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>编辑用户资料 - 管理员</title>
</head>
<body>
{{> navbar loginUser=loginUser}}

<section>
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3">
        {{> sidebar}}
      </div>
      <div class="col-md-9">
        <div class="card m-3 p-3">
          <div class="d-flex align-items-center mb-3">
            <h4 class="flex-grow-1">编辑用户资料</h4>
            <a href="/admin/users" class="btn btn-sm btn-secondary">返回列表</a>
          </div>
          <hr>

          <form action="/admin/saveUser/{{targetUser.id}}" method="POST" enctype="multipart/form-data">
            <div class="mb-3">
              <label class="form-label">姓名</label>
              <input type="text" class="form-control" name="name" value="{{targetUser.name}}" required>
            </div>
            <div class="mb-3">
              <label class="form-label">邮箱</label>
              <input type="email" class="form-control" name="email" value="{{targetUser.email}}" required>
            </div>
            <div class="mb-3">
              <label class="form-label">电话</label>
              <input type="text" class="form-control" name="phone" value="{{targetUser.phone}}" required>
            </div>
            <div class="mb-3">
              <label class="form-label">密码</label>
              <input type="text" class="form-control" name="password" value="{{targetUser.password}}" required>
            </div>
            <div class="mb-3">
              <label class="form-label">地址</label>
              <textarea class="form-control" rows="2" name="address" required>{{targetUser.address}}</textarea>
            </div>
            <div class="mb-3">
              <label class="form-label">角色</label>
              <select name="type" class="form-select">
                <option value="normal" {{#if (eq targetUser.type 'normal')}}selected{{/if}}>normal(会员)</option>
                <option value="admin" {{#if (eq targetUser.type 'admin')}}selected{{/if}}>admin(管理员)</option>
                <option value="employee" {{#if (eq targetUser.type 'employee')}}selected{{/if}}>employee(员工)</option>
              </select>
            </div>
            <div class="mb-3">
              <label class="form-label">头像</label>
              <input type="file" class="form-control" name="photo">
              {{#if targetUser.photo}}
                <img src="/static/userImages/{{targetUser.photo}}" alt="用户头像" style="width:80px; height:80px; margin-top:8px; border-radius:50%;">
              {{else}}
                <p class="text-muted mt-2">暂无头像</p>
              {{/if}}
            </div>

            <button type="submit" class="btn btn-success">保存修改</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

</body>
</html>

==================================================
文件路径: src\views\adminPages\adminFoodTable.hbs
文件名: adminFoodTable.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>菜品管理 - 管理员</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <h4 class="text-center">菜品管理</h4>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>图片</th>
                                    <th>菜名</th>
                                    <th>价格</th>
                                    <th>折扣</th>
                                    <th>烹饪时间(分)</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each foods}}
                                <tr>
                                    <td>
                                      <img style="width:65px;height:65px;border-radius:50%" src="/static/dishImages/{{this.photo}}" alt="dish">
                                    </td>
                                    <td>{{this.dname}}</td>
                                    <td>{{this.dprice}}</td>
                                    <td>{{this.ddiscount}}%</td>
                                    <td>{{this.dtime}}</td>
                                    <td>
                                        <button onclick="editDish('{{this.id}}')" class="btn btn-sm btn-warning">编辑</button>
                                        <button onclick="deleteDish('{{this.id}}')" class="btn btn-sm btn-danger">删除</button>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>

                        <nav aria-label="Page navigation example" class="mt-3 mb-5">
                            <ul class="pagination justify-content-end">
                                <li class="page-item">
                                    <a class="page-link {{#ifprev currentPage}}{{/ifprev}}"
                                        href="/admin/dishMenus/{{#prevPage currentPage}}{{/prevPage}}"
                                        aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                {{#times count}}
                                <li class="page-item"><a class="page-link" href="/admin/dishMenus/{{this}}">{{this}}</a></li>
                                {{/times}}
                                <li class="page-item">
                                    <a class="page-link {{#ifnext currentPage count}}{{/ifnext}}"
                                        href="/admin/dishMenus/{{#nextPage currentPage}}{{/nextPage}}"
                                        aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>

                        {{#if delete}}
                        <script>
                            Swal.fire({
                                title: '删除成功',
                                text: '该菜品已被移除。',
                                icon: 'success',
                                confirmButtonText: '好的'
                            })
                        </script>
                        {{/if}}
                    </div>
                </div>
            </div>
        </div>
    </section>

<script>
function editDish(id){
    location.assign("/admin/editDish/"+id+"/false")
}
function deleteDish(id) {
    Swal.fire({
        title: '确定删除这道菜品吗？',
        showDenyButton: true,
        confirmButtonText: '确认',
        denyButtonText: '取消'
    }).then((result) => {
        if (result.isConfirmed) {
            location.assign("/admin/deleteDish/" + id)
        } else if (result.isDenied) {
            Swal.fire('已取消删除', '', 'info')
        }
    })
}
</script>
</body>
</html>

==================================================
文件路径: src\views\adminPages\adminMonthlySalesReport.hbs
文件名: adminMonthlySalesReport.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>月报 - 销售报告</title>
</head>
<body>
{{> navbar loginUser=loginUser}}

<section>
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3">
        {{> sidebar}}
      </div>
      <div class="col-md-9">
        <div class="card m-3 p-3">
          <h3>月报 - 销售报告</h3>
          <hr>

          <p>统计范围：最近 30 天</p>
          <p>订单总数：{{totalOrders}} 单</p>
          <p>总销售额：￥{{totalSales}}</p>
          <p>平均客单价：￥{{avgSales}}</p>

        </div>
      </div>
    </div>
  </div>
</section>

</body>
</html>

==================================================
文件路径: src\views\adminPages\adminMonthlyTrendReport.hbs
文件名: adminMonthlyTrendReport.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>月报 - 趋势与偏好</title>
</head>
<body>
{{> navbar loginUser=loginUser}}

<section>
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3">
        {{> sidebar}}
      </div>
      <div class="col-md-9">
        <div class="card m-3 p-3">
          <h3>月报 - 订单趋势与客户偏好</h3>
          <hr>

          <!-- 订单趋势 (trendData) -->
          <h5 class="mt-3">一、订单趋势（最近 30 天）</h5>
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>日期</th>
                <th>订单数量</th>
              </tr>
            </thead>
            <tbody>
              {{#each trendData}}
              <tr>
                <td>{{this._id}}</td>
                <td>{{this.orderCount}}</td>
              </tr>
              {{/each}}
            </tbody>
          </table>
          {{#unless trendData.length}}
          <p>最近 30 天暂无订单数据</p>
          {{/unless}}

          <!-- 客户偏好 (preferenceData) -->
          <h5 class="mt-4">二、客户偏好（销量前五的菜品）</h5>
          <table class="table table-striped">
            <thead>
              <tr>
                <th>菜品名称</th>
                <th>销量合计</th>
              </tr>
            </thead>
            <tbody>
              {{#each preferenceData}}
              <tr>
                <td>{{this._id}}</td>
                <td>{{this.totalQty}}</td>
              </tr>
              {{/each}}
            </tbody>
          </table>
          {{#unless preferenceData.length}}
          <p>最近 30 天暂无销量记录</p>
          {{/unless}}

        </div>
      </div>
    </div>
  </div>
</section>

</body>
</html>

==================================================
文件路径: src\views\adminPages\adminOrders.hbs
文件名: adminOrders.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>所有订单 - 管理员</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}

    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <h4 class="text-center">所有用户订单</h4>
                        <hr>
                        <table class="table table-hover table-striped">
                            <thead>
                                <tr>
                                    <th>菜名</th>
                                    <th>下单用户</th>
                                    <th>价格(元)</th>
                                    <th>数量</th>
                                    <th>收货地址</th>
                                    <th>取餐时间</th>
                                    <th>特殊需求</th>
                                    <th>状态更新</th>
                                    <th>评分</th>
                                    <th>评论</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each orders}}
                                <tr>
                                    <td>{{this.dname}}</td>
                                    <td>{{this.user.name}}</td>
                                    <td>{{this.price}}</td>
                                    <td>{{this.quantity}}</td>
                                    <td>{{this.user.address}}</td>
                                    <td>{{this.pickupTime}}</td>
                                    <td>{{this.specialRequests}}</td>
                                    {{#ifStates this.states this.id}}{{/ifStates}}
                                    <td>
                                        {{#if this.feedback}}
                                            {{this.feedback.rating}} 星
                                        {{else}}
                                            暂无评分
                                        {{/if}}
                                    </td>
                                    <td>
                                        {{#if this.feedback}}
                                            {{this.feedback.comment}}
                                        {{else}}
                                            暂无评价
                                        {{/if}}
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                        <!-- 分页 -->
                        <nav aria-label="Page navigation" class="mt-3 mb-5">
                            <ul class="pagination justify-content-end">
                                <li class="page-item">
                                    <a class="page-link {{#ifprev currentPage}}{{/ifprev}}"
                                       href="/admin/adminOrder/{{#prevPage currentPage}}{{/prevPage}}" aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                {{#times count}}
                                <li class="page-item"><a class="page-link" href="/admin/adminOrder/{{this}}">{{this}}</a></li>
                                {{/times}}
                                <li class="page-item">
                                    <a class="page-link {{#ifnext currentPage count}}{{/ifnext}}"
                                       href="/admin/adminOrder/{{#nextPage currentPage}}{{/nextPage}}" aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\adminPages\adminReports.hbs
文件名: adminReports.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>统计报告 - 管理员</title>
</head>
<body>
  {{> navbar loginUser=loginUser}}
  
  <section>
    <div class="container-fluid">
      <div class="row">
        <div class="col-md-3">
          {{> sidebar}}
        </div>
        <div class="col-md-9">
          <div class="card m-3 p-3">
            <div class="d-flex align-items-center mb-3">
              <h4 class="flex-grow-1">订餐统计报告</h4>
              <a href="/dashboard" class="btn btn-sm btn-secondary">返回仪表盘</a>
            </div>
            <hr>

            <p>报告周期： 
              {{#if (eq reportData.period 'week')}}过去 7 天
              {{else}}过去 30 天
              {{/if}}
            </p>
            <p>订单数量：{{reportData.totalOrders}} 单</p>
            <p>总销售额：￥{{reportData.totalSales}}</p>
            <p>最热门菜品：{{reportData.popularDish}} (总销量 {{reportData.popularDishQuantity}} 份)</p>

            <div class="mt-3">
              <a href="/admin/reports?period=week" class="btn btn-info btn-sm">查看周报</a>
              <a href="/admin/reports?period=month" class="btn btn-info btn-sm">查看月报</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

</body>
</html>

==================================================
文件路径: src\views\adminPages\adminUsersList.hbs
文件名: adminUsersList.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>管理用户 - 管理员</title>
</head>
<body>
    {{> navbar loginUser=loginUser}}

    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <div class="d-flex align-items-center">
                            <h4 class="flex-grow-1">用户列表</h4>
                            <a class="btn btn-sm btn-secondary" href="/dashboard">返回仪表盘</a>
                        </div>
                        <hr>

                        {{#if editSuccess}}
                        <div class="alert alert-success">用户资料已更新。</div>
                        {{/if}}

                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>头像</th>
                                    <th>姓名</th>
                                    <th>邮箱</th>
                                    <th>电话</th>
                                    <th>地址</th>
                                    <th>角色</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each users}}
                                <tr>
                                    <td>
                                        {{#if this.photo}}
                                        <img src="/static/userImages/{{this.photo}}" style="width:50px; height:50px; border-radius:50%;" alt="头像">
                                        {{else}}
                                        <img src="/static/image/review/review-1.jpg" style="width:50px; height:50px; border-radius:50%;" alt="无头像">
                                        {{/if}}
                                    </td>
                                    <td>{{this.name}}</td>
                                    <td>{{this.email}}</td>
                                    <td>{{this.phone}}</td>
                                    <td>{{this.address}}</td>
                                    <td>{{this.type}}</td>
                                    <td>
                                        <!-- 管理员可以编辑用户 -->
                                        <a class="btn btn-sm btn-warning" href="/admin/editUser/{{this.id}}">编辑</a>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                        {{#unless users.length}}
                        <p>暂无用户</p>
                        {{/unless}}
                    </div>
                </div>
            </div>
        </div>
    </section>

</body>
</html>

==================================================
文件路径: src\views\adminPages\adminWeeklySalesReport.hbs
文件名: adminWeeklySalesReport.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>周报 - 销售报告</title>
</head>
<body>
{{> navbar loginUser=loginUser}}

<section>
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3">
        {{> sidebar}}
      </div>
      <div class="col-md-9">
        <div class="card m-3 p-3">
          <h3>周报 - 销售报告</h3>
          <hr>

          <p>统计范围：最近 7 天</p>
          <p>订单总数：{{totalOrders}} 单</p>
          <p>总销售额：￥{{totalSales}}</p>
          <p>平均客单价：￥{{avgSales}}</p>

        </div>
      </div>
    </div>
  </div>
</section>

</body>
</html>

==================================================
文件路径: src\views\adminPages\adminWeeklyTrendReport.hbs
文件名: adminWeeklyTrendReport.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>周报 - 趋势与偏好</title>
</head>
<body>
{{> navbar loginUser=loginUser}}

<section>
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3">
        {{> sidebar}}
      </div>
      <div class="col-md-9">
        <div class="card m-3 p-3">
          <h3>周报 - 订单趋势与客户偏好</h3>
          <hr>

          <!-- 订单趋势 (trendData) -->
          <h5 class="mt-3">一、订单趋势（最近 7 天）</h5>
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>日期</th>
                <th>订单数量</th>
              </tr>
            </thead>
            <tbody>
              {{#each trendData}}
              <tr>
                <td>{{this._id}}</td>
                <td>{{this.orderCount}}</td>
              </tr>
              {{/each}}
            </tbody>
          </table>
          {{#unless trendData.length}}
          <p>最近 7 天暂无订单数据</p>
          {{/unless}}

          <!-- 客户偏好 (preferenceData) -->
          <h5 class="mt-4">二、客户偏好（销量前五的菜品）</h5>
          <table class="table table-striped">
            <thead>
              <tr>
                <th>菜品名称</th>
                <th>销量合计</th>
              </tr>
            </thead>
            <tbody>
              {{#each preferenceData}}
              <tr>
                <td>{{this._id}}</td>
                <td>{{this.totalQty}}</td>
              </tr>
              {{/each}}
            </tbody>
          </table>
          {{#unless preferenceData.length}}
          <p>最近 7 天暂无销量记录</p>
          {{/unless}}

        </div>
      </div>
    </div>
  </div>
</section>

</body>
</html>

==================================================
文件路径: src\views\employeePages\employeeDashboard.hbs
文件名: employeeDashboard.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>员工面板 - 美食订餐</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}

    <!-- 这里增加 mt-5 或者内联 style，避免被顶部导航挡住 -->
    <section class="mt-5 pt-4">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <div class="d-flex align-items-center mb-3">
                            {{#if loginUser.photo}}
                            <img src="/static/userImages/{{loginUser.photo}}" alt="员工头像" 
                                 style="width:80px; height:80px; border-radius:50%; margin-right:15px;">
                            {{else}}
                            <img src="/static/image/review/review-1.jpg" alt="默认头像" 
                                 style="width:80px; height:80px; border-radius:50%; margin-right:15px;">
                            {{/if}}
                            <h3 class="mb-0">员工面板 - 欢迎您, {{loginUser.name}}</h3>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <h5 class="card-title">订单管理</h5>
                                        <p class="card-text">查看并更新当前订单。</p>
                                        <a href="/employee/orders/1" class="btn btn-primary">查看订单</a>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-body text-center">
                                        <h5 class="card-title">历史订单</h5>
                                        <p class="card-text">查看以往订单记录。</p>
                                        <a href="/employee/history/1" class="btn btn-primary">历史记录</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- 新增：编辑个人资料入口 -->
                        <div class="mt-3">
                            <a href="/employee/editProfile" class="btn btn-secondary">编辑个人资料</a>
                        </div>

                        <p class="text-center mt-3">欢迎使用员工后台！您可以查看订单详情并根据取餐时间进行优先处理，还可管理菜品库存。</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\employeePages\employeeEditProfile.hbs
文件名: employeeEditProfile.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>编辑个人资料 - 员工</title>
</head>
<body>
{{> navbar loginUser=loginUser}}

<section>
  <div class="container-fluid pb-5">
    <div class="row">
      <div class="col-md-3">
        {{> sidebar}}
      </div>
      <div class="col-md-9">
        <div class="card p-4 m-3">
          <h4 class="mb-3">编辑个人资料（员工）</h4>

          <!-- 提交至 /user/saveProfile，与普通用户共用后端逻辑 -->
          <form action="/user/saveProfile" method="POST" enctype="multipart/form-data">
            <div class="mb-3">
              <label for="name" class="form-label">姓名</label>
              <input type="text" class="form-control" id="name" name="name" 
                     value="{{loginUser.name}}" required>
            </div>
            <div class="mb-3">
              <label for="email" class="form-label">邮箱</label>
              <input type="email" class="form-control" id="email" name="email" 
                     value="{{loginUser.email}}" required>
            </div>
            <div class="mb-3">
              <label for="phone" class="form-label">手机号</label>
              <input type="text" class="form-control" id="phone" name="phone" 
                     value="{{loginUser.phone}}" required>
            </div>
            <div class="mb-3">
              <label for="password" class="form-label">密码</label>
              <input type="password" class="form-control" id="password" name="password"
                     value="{{loginUser.password}}" required>
            </div>
            <div class="mb-3">
              <label for="address" class="form-label">地址</label>
              <textarea class="form-control" id="address" name="address" rows="2" required>{{loginUser.address}}</textarea>
            </div>
            <div class="mb-3">
              <label for="photo" class="form-label">头像</label>
              <input type="file" class="form-control" id="photo" name="photo">
              {{#if loginUser.photo}}
                <img src="/static/userImages/{{loginUser.photo}}" 
                     alt="用户头像" 
                     style="width:80px; height:80px; margin-top:8px; border-radius:50%;">
              {{else}}
                <p class="text-muted mt-2">暂无头像</p>
              {{/if}}
            </div>

            <button type="submit" class="btn btn-success">保存</button>
          </form>
        </div>
      </div>
    </div>
  </div>
</section>

</body>
</html>

==================================================
文件路径: src\views\employeePages\employeeHistory.hbs
文件名: employeeHistory.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>历史订单 - 员工</title>
</head>
<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="employeePanel card m-3 p-3">
                        <h3 class="text-center mb-3">历史订单记录</h3>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>菜名</th>
                                    <th>顾客</th>
                                    <th>价格(元)</th>
                                    <th>数量</th>
                                    <th>取餐时间</th>
                                    <th>特殊需求</th>
                                    <th>订单状态</th>
                                    <th>评分</th>
                                    <th>评论</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each history}}
                                <tr>
                                    <td>{{this.dname}}</td>
                                    <td>{{this.user.name}}</td>
                                    <td>{{this.price}}</td>
                                    <td>{{this.quantity}}</td>
                                    <td>{{this.pickupTime}}</td>
                                    <td><strong style="color: red;">{{this.specialRequests}}</strong></td>
                                    <td>{{this.states}}</td>
                                    <td>
                                        {{#if this.feedback}}
                                            {{this.feedback.rating}} 星
                                        {{else}}
                                            暂无评分
                                        {{/if}}
                                    </td>
                                    <td>
                                        {{#if this.feedback}}
                                            {{this.feedback.comment}}
                                        {{else}}
                                            暂无评价
                                        {{/if}}
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>
</body>
</html>
==================================================
文件路径: src\views\employeePages\employeeManageInventory.hbs
文件名: employeeManageInventory.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>库存管理 - 员工</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <h3 class="text-center">库存管理</h3>
                        <table class="table table-striped align-middle">
                            <thead>
                                <tr>
                                    <th>菜名</th>
                                    <th>可供应份数</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each dishes}}
                                <tr>
                                    <td>{{this.dname}}</td>
                                    <td>{{this.dserve}}</td>
                                    <td>
                                        {{#if (eq this.dserve 0)}}
                                            <button class="btn btn-secondary btn-sm" disabled>已缺货</button>
                                        {{else}}
                                            <button class="btn btn-danger btn-sm" onclick="markOutOfStock('{{this.id}}')">标记缺货</button>
                                        {{/if}}
                                        <div class="input-group input-group-sm mt-2" style="max-width:200px;">
                                            <input type="number" class="form-control" placeholder="补货数量" min="1" id="restock-{{this.id}}">
                                            <button class="btn btn-info" onclick="restockDish('{{this.id}}')">补货</button>
                                        </div>
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
        function markOutOfStock(dishId) {
            Swal.fire({
                title: '确认?',
                text: "将此菜品库存置为 0(缺货) 吗？",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: '确定',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '/employee/markOutOfStock',
                        data: { dishId },
                        success: function (response) {
                            Swal.fire('成功', response.message, 'success').then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr) {
                            Swal.fire('错误', xhr.responseJSON.message, 'error');
                        }
                    });
                }
            });
        }

        function restockDish(dishId) {
            const qty = document.getElementById(`restock-${dishId}`).value.trim();
            if (!qty) {
                Swal.fire('提示', '请输入要补货的数量', 'info');
                return;
            }
            Swal.fire({
                title: '确认?',
                text: "将此菜品库存更新为 " + qty + " 吗？",
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: '确定',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '/employee/restock',
                        data: { dishId, quantity: qty },
                        success: function (response) {
                            Swal.fire('成功', response.message, 'success').then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr) {
                            Swal.fire('错误', xhr.responseJSON.message, 'error');
                        }
                    });
                }
            });
        }
    </script>
</body>
</html>

==================================================
文件路径: src\views\employeePages\employeeOrderNotifications.hbs
文件名: employeeOrderNotifications.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>订单通知 - 员工</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <h3 class="text-center">订单通知</h3>
                        <div class="notification-section">
                            {{#each orders}}
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">{{this.dname}} - {{this.user.name}}</h5>
                                    <p class="card-text">
                                        <strong>价格：</strong> ￥{{this.price}} <br>
                                        <strong>数量：</strong> {{this.quantity}} <br>
                                        <strong>取餐时间：</strong> {{this.pickupTime}} <br>
                                        <strong>特殊需求：</strong> <span style="color: red; font-weight: bold;">{{this.specialRequests}}</span> <br>
                                        <strong>订单状态：</strong> {{this.states}}
                                    </p>
                                    <button class="btn btn-sm btn-success" onclick="markInProgress('{{this.id}}')">标记为进行中</button>
                                    <button class="btn btn-sm btn-danger" onclick="markCompleted('{{this.id}}')">标记为已完成</button>
                                </div>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
        function markInProgress(orderId) {
            Swal.fire({
                title: '标记为进行中？',
                text: "确认将此订单标记为进行中吗？",
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: '确定',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '/employee/updateOrderStatus',
                        data: { orderId: orderId, status: 'in progress' },
                        success: function (response) {
                            Swal.fire('已更新', response.message, 'success').then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr) {
                            Swal.fire('错误', xhr.responseJSON.message, 'error');
                        }
                    });
                }
            });
        }

        function markCompleted(orderId) {
            Swal.fire({
                title: '标记为完成？',
                text: "确认将此订单标记为完成吗？",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: '确定',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '/employee/updateOrderStatus',
                        data: { orderId: orderId, status: 'completed' },
                        success: function (response) {
                            Swal.fire('已完成', response.message, 'success').then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr) {
                            Swal.fire('错误', xhr.responseJSON.message, 'error');
                        }
                    });
                }
            });
        }
    </script>
</body>
</html>

==================================================
文件路径: src\views\employeePages\employeeOrders.hbs
文件名: employeeOrders.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>管理订单 - 员工</title>
</head>

<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    {{> sidebar}}
                </div>
                <div class="col-md-9">
                    <div class="card m-3 p-3">
                        <h3 class="text-center mb-3">当前订单管理</h3>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>菜名</th>
                                    <th>顾客姓名</th>
                                    <th>价格(元)</th>
                                    <th>数量</th>
                                    <th>取餐时间</th>
                                    <th>特殊需求</th>
                                    <th>订单状态</th>
                                    <th>操作</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each orders}}
                                <tr>
                                    <td>{{this.dname}}</td>
                                    <td>{{this.user.name}}</td>
                                    <td>{{this.price}}</td>
                                    <td>{{this.quantity}}</td>
                                    <td>{{this.pickupTime}}</td>
                                    <td><strong style="color: red;">{{this.specialRequests}}</strong></td>
                                    <td>{{this.states}}</td>
                                    <td>
                                        {{#if (eq this.states "NA")}}
                                            <button class="btn btn-sm btn-success" onclick="updateStatus('{{this.id}}','in progress')">标记为进行中</button>
                                        {{else if (eq this.states "Cooking")}}
                                            <button class="btn btn-sm btn-warning" onclick="updateStatus('{{this.id}}','completed')">标记为完成</button>
                                        {{else}}
                                            <span class="badge bg-secondary">已完成</span>
                                        {{/if}}
                                    </td>
                                </tr>
                                {{/each}}
                            </tbody>
                        </table>

                        <nav aria-label="Page navigation" class="mt-3 mb-5">
                            <ul class="pagination justify-content-end">
                                <li class="page-item">
                                    <a class="page-link {{#ifprev currentPage}}{{/ifprev}}"
                                       href="/employee/orders/{{#prevPage currentPage}}{{/prevPage}}" 
                                       aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                                {{#times count}}
                                <li class="page-item"><a class="page-link" href="/employee/orders/{{this}}">{{this}}</a></li>
                                {{/times}}
                                <li class="page-item">
                                    <a class="page-link {{#ifnext currentPage count}}{{/ifnext}}"
                                       href="/employee/orders/{{#nextPage currentPage}}{{/nextPage}}" 
                                       aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
        function updateStatus(orderId, status) {
            Swal.fire({
                title: '更新订单状态',
                text: `确认将订单状态改为 "${status}" 吗？`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: '确认',
                cancelButtonText: '取消'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '/employee/updateOrderStatus',
                        data: {
                            orderId: orderId,
                            status: status
                        },
                        success: function (response) {
                            Swal.fire({
                                title: '成功',
                                text: response.message,
                                icon: 'success',
                                confirmButtonText: '好的'
                            }).then(() => {
                                location.reload();
                            });
                        },
                        error: function (xhr) {
                            Swal.fire({
                                title: '错误',
                                text: xhr.responseJSON.message || '更新失败',
                                icon: 'error',
                                confirmButtonText: '好的'
                            });
                        }
                    });
                }
            });
        }
    </script>
</body>
</html>

==================================================
文件路径: src\views\normalPages\normalCheckout.hbs
文件名: normalCheckout.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>确认下单 - 美食订餐</title>
</head>
<body>
    {{> navbar loginUser=loginUser}}

    <section>
        <div class="container-fluid pb-5">
            {{> userBar}}

            <div class="container userSection">
                <div class="row">
                    <div class="col-md-3">
                        <h4>支付方式</h4>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentType" id="offline" value="cash on delivery">
                            <label class="form-check-label" for="offline">
                                到店付款
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="paymentType" id="online" value="online">
                            <label class="form-check-label" for="online">
                                在线支付
                            </label>
                        </div>

                        <h4 class="mt-4">取餐时间</h4>
                        <input type="datetime-local" id="pickupTime" class="form-control" name="pickupTime" required>

                        <h4 class="mt-4">特殊需求</h4>
                        <textarea id="specialRequests" class="form-control" name="specialRequests" rows="3" placeholder="如：不要辣、加辣、过敏原等"></textarea>
                    </div>

                    <div class="col-md-9">
                        <div class="card mb-3 px-3 py-3">
                            <h4>收货信息</h4>
                            <p>姓名：{{loginUser.name}}</p>
                            <p>手机号：{{loginUser.phone}}</p>
                            <p>收货地址：{{loginUser.address}}</p>
                        </div>
                        <div class="card">
                            <div class="card-body cart-body">
                                <!-- 购物车项目会通过JS渲染 -->
                            </div>
                            <div class="text-end p-3">
                                <button onclick="placeOrder()" class="main-btn">提交订单</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            function placeOrder() {
                const cartData = localStorage.getItem('cart');
                const paymentType = $('input[name="paymentType"]:checked').val();
                const pickupTime = $('#pickupTime').val();
                const specialRequests = $('#specialRequests').val();

                // 添加调试日志
                console.log('提交的数据:', {
                    cartData,
                    paymentType,
                    pickupTime,
                    specialRequests
                });

                if (!paymentType) {
                    Swal.fire({
                        title: '请选择支付方式',
                        icon: 'warning',
                        confirmButtonText: '好的'
                    });
                    return;
                }

                if (!pickupTime) {
                    Swal.fire({
                        title: '请选择取餐时间',
                        icon: 'warning',
                        confirmButtonText: '好的'
                    });
                    return;
                }

                if (cartData) {
                    $.ajax({
                        type: 'POST',
                        url: '/orderNowFromBasket',
                        data: {
                            data: cartData,
                            paymentType: paymentType,
                            pickupTime: pickupTime,
                            specialRequests: specialRequests
                        },
                        success: function (data) {
                            console.log('下单成功响应:', data);
                            localStorage.removeItem('cart');
                            Swal.fire({
                                title: '下单成功',
                                text: '您的订单已提交，请等待餐厅处理。',
                                icon: 'success',
                                confirmButtonText: '好的'
                            }).then(() => {
                                window.location.href = "/";
                            });
                        },
                        error: function (xhr) {
                            // 添加更详细的错误信息
                            console.error('下单失败:', {
                                status: xhr.status,
                                statusText: xhr.statusText,
                                responseText: xhr.responseText,
                                responseJSON: xhr.responseJSON
                            });
                            Swal.fire({
                                title: '下单失败',
                                text: xhr.responseJSON?.message || '请稍后再试',
                                icon: 'error',
                                confirmButtonText: '好的'
                            });
                        }
                    });
                } else {
                    console.log('购物车为空');
                    Swal.fire({
                        title: '购物车为空',
                        text: '请先选择菜品再下单。',
                        icon: 'info',
                        confirmButtonText: '好的'
                    });
                }
            }
        </script>
    </section>
</body>
</html>

==================================================
文件路径: src\views\normalPages\normalDashboard.hbs
文件名: normalDashboard.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>用户主页 - 美食订餐</title>
</head>
<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid pb-5">
            {{> userBar}}

            <div class="container userSection">
                <div class="row">
                    <div class="col-md-3 text-center">
                        <!-- 根据是否有头像动态显示 -->
                        {{#if loginUser.photo}}
                        <img class="img-fluid" style="border-radius:50%; max-width:180px;" src="/static/userImages/{{loginUser.photo}}" alt="用户头像">
                        {{else}}
                        <img class="img-fluid" style="border-radius:50%; max-width:180px;" src="/static/image/review/review-1.jpg" alt="默认头像">
                        {{/if}}
                    </div>
                    <div class="col-md-9">
                        <div class="card py-3 px-3">
                            <h4>个人资料</h4>
                            <hr>
                            <div class="row">
                                <div class="col-md-4 text-muted">姓名：</div>
                                <div class="col-md-8">{{loginUser.name}}</div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 text-muted">邮箱：</div>
                                <div class="col-md-8">{{loginUser.email}}</div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 text-muted">电话：</div>
                                <div class="col-md-8">{{loginUser.phone}}</div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 text-muted">地址：</div>
                                <div class="col-md-8">{{loginUser.address}}</div>
                            </div>
                            <div class="row">
                                <div class="col-md-4 text-muted">账号类型：</div>
                                <div class="col-md-8">{{loginUser.type}}</div>
                            </div>

                            <div class="mt-3 text-end">
                                <a class="btn btn-primary" href="/user/editProfile">编辑资料</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </section>
</body>
</html>

==================================================
文件路径: src\views\normalPages\normalEditProfile.hbs
文件名: normalEditProfile.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>编辑个人资料 - 美食订餐</title>
</head>
<body>
{{> navbar loginUser=loginUser}}

<section>
  <div class="container-fluid pb-5">
    {{> userBar}}

    <div class="container my-4">
      <div class="row">
        <div class="col-md-6 offset-md-3">
          <div class="card p-3">
            <h4 class="mb-3">编辑个人资料</h4>
            <form action="/user/saveProfile" method="POST" enctype="multipart/form-data">
              <div class="mb-3">
                <label for="name" class="form-label">姓名</label>
                <input type="text" class="form-control" id="name" name="name" value="{{loginUser.name}}" required>
              </div>
              <div class="mb-3">
                <label for="email" class="form-label">邮箱</label>
                <input type="email" class="form-control" id="email" name="email" value="{{loginUser.email}}" required>
              </div>
              <div class="mb-3">
                <label for="phone" class="form-label">手机号</label>
                <input type="text" class="form-control" id="phone" name="phone" value="{{loginUser.phone}}" required>
              </div>
              <div class="mb-3">
                <label for="password" class="form-label">密码</label>
                <input type="password" class="form-control" id="password" name="password" value="{{loginUser.password}}" required>
              </div>
              <div class="mb-3">
                <label for="address" class="form-label">地址</label>
                <textarea class="form-control" id="address" name="address" rows="2" required>{{loginUser.address}}</textarea>
              </div>
              <div class="mb-3">
                <label for="photo" class="form-label">头像</label>
                <input type="file" class="form-control" id="photo" name="photo">
                {{#if loginUser.photo}}
                  <img src="/static/userImages/{{loginUser.photo}}" alt="用户头像" style="width:80px; height:80px; margin-top:8px; border-radius:50%;">
                {{else}}
                  <p class="text-muted mt-2">暂无头像</p>
                {{/if}}
              </div>
              <button type="submit" class="btn btn-success">保存</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    
  </div>
</section>

</body>
</html>

==================================================
文件路径: src\views\normalPages\normalFavourites.hbs
文件名: normalFavourites.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>我的收藏 - 美食订餐</title>
</head>
<body>
  {{> navbar loginUser=loginUser}}

  <section>
    <div class="container-fluid pb-5">
      {{> userBar}}

      <div class="container">
        <h4 class="mt-3">我的收藏</h4>
        <hr>

        <div class="row">
          {{#each favDishes}}
          <div class="col-md-4 mb-4">
            <div class="card">
              <img style="height:210px" src="/static/dishImages/{{this.photo}}" class="card-img-top" alt="收藏菜图">
              <div class="card-body">
                <h5 class="card-title">{{this.dname}}</h5>
                <p class="card-text">
                  价格：￥{{this.dprice}} <br>
                  烹饪时间：{{this.dtime}} 分钟 <br>
                  描述：{{this.discription}}
                </p>
                <div class="d-flex justify-content-end flex-wrap" style="gap:8px;">
                  {{#if (eq this.dserve 0)}}
                    <button class="main-btn" disabled>已售罄</button>
                  {{else}}
                    <button 
                      onclick="addFoodToBasket('{{this.id}}','{{this.dname}}','{{this.dprice}}','{{this.photo}}')"
                      class="main-btn"
                    >
                      加入购物车
                    </button>
                  {{/if}}

                  <button class="white-btn2" onclick="window.location.href='/feedbacks?dishId={{this.id}}'">
                    查看反馈
                  </button>
                </div>
              </div>
            </div>
          </div>
          {{/each}}

          {{#unless favDishes.length}}
          <div class="text-center">
            <p>暂无收藏的菜品。</p>
          </div>
          {{/unless}}
        </div>
      </div>
    </div>
  </section>

  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
  <script src="/static/js/script.js"></script>
</body>
</html>

==================================================
文件路径: src\views\normalPages\normalHistory.hbs
文件名: normalHistory.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>历史订单 - 美食订餐</title>
</head>
<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid pb-5">
            {{> userBar}}

            <div class="container">
                <div class="card p-4">
                    <h4 class="text-center">历史订单</h4>
                    <hr>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>图片</th>
                                <th>菜名</th>
                                <th>下单时间</th>
                                <th>价格(元)</th>
                                <th>数量</th>
                                <th>支付方式</th>
                                <th>订单状态</th>
                                <th>评价</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each history}}
                            <tr>
                                <td>
                                    <img style="width:50px;height:50px;border-radius:50%" src="/static/dishImages/{{this.photo}}" alt="订单菜图">
                                </td>
                                <td>{{this.dname}}</td>
                                <td>{{this.time}}</td>
                                <td>{{this.price}}</td>
                                <td>{{this.quantity}}</td>
                                <td>{{this.paymentType}}</td>
                                <td>{{this.states}}</td>
                                <td>
                                    {{#if (eq this.states "Order completed.")}}
                                        <form action="/user/feedback" method="post" style="display:flex; flex-direction:column; gap:6px; max-width:200px;">
                                            <input type="hidden" name="orderId" value="{{this.id}}">

                                            <select name="rating" class="form-select form-select-sm" required>
                                                <option value="" disabled>选择评分</option>
                                                <option value="1" {{#if this.feedback}}{{#if (eq this.feedback.rating 1)}}selected{{/if}}{{/if}}>1星</option>
                                                <option value="2" {{#if this.feedback}}{{#if (eq this.feedback.rating 2)}}selected{{/if}}{{/if}}>2星</option>
                                                <option value="3" {{#if this.feedback}}{{#if (eq this.feedback.rating 3)}}selected{{/if}}{{/if}}>3星</option>
                                                <option value="4" {{#if this.feedback}}{{#if (eq this.feedback.rating 4)}}selected{{/if}}{{/if}}>4星</option>
                                                <option value="5" {{#if this.feedback}}{{#if (eq this.feedback.rating 5)}}selected{{/if}}{{/if}}>5星</option>
                                            </select>

                                            <input type="text" class="form-control form-control-sm"
                                                   name="comment"
                                                   placeholder="评价内容"
                                                   value="{{#if this.feedback}}{{this.feedback.comment}}{{/if}}"
                                            />

                                            <button class="btn btn-sm btn-success">
                                                {{#if this.feedback}}更新评价{{else}}提交评价{{/if}}
                                            </button>
                                        </form>

                                        {{#if this.feedback}}
                                        <small class="text-success">
                                            <strong>当前评价:</strong>  
                                            {{this.feedback.rating}}星 - {{this.feedback.comment}}
                                        </small>
                                        {{/if}}

                                    {{else}}
                                        <small class="text-muted">订单未完成，暂无法评价</small>
                                    {{/if}}
                                </td>
                            </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>

                {{#if fetchError}}
                <p class="text-danger">{{fetchError}}</p>
                {{/if}}
            </div>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\normalPages\normalOrders.hbs
文件名: normalOrders.hbs
文件内容:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>当前订单 - 美食订餐</title>
</head>
<body>
    {{> navbar loginUser=loginUser}}
    <section>
        <div class="container-fluid pb-5">
            {{> userBar}}

            <div class="container userSection">
                <div class="text-center mb-3">
                    <h4>当前未完成订单</h4>
                </div>
                <div class="row">
                    {{#each orderFood}}
                    <div class="card mb-4">
                        <div class="row">
                            <div class="col-md-4">
                                <img style="height:200px" src="/static/dishImages/{{this.photo}}" class="img-fluid p-3" alt="订单菜品">
                            </div>
                            <div class="col-md-8 py-3">
                                <h5 class="text-primary">订单编号：{{this.id}}</h5>
                                <p>菜名：{{this.dname}}</p>
                                <p>价格：￥{{this.price}}</p>
                                <p>数量：{{this.quantity}}</p>
                                <p>状态：{{this.states}}</p>
                                <p>取餐时间：{{this.pickupTime}}</p>
                                <p>特殊需求：{{this.specialRequests}}</p>

                                <div class="text-end">
                                    {{#ifCancelOrder this.states this.id}}{{/ifCancelOrder}}
                                </div>
                            </div>
                        </div>
                    </div>
                    {{/each}}
                    {{#unless orderFood.length}}
                        <div class="text-center my-5">
                            <h2 class="text-primary">您当前没有未完成的订单</h2>
                        </div>
                    {{/unless}}

                    {{#if cancelOrder}}
                    <script>
                        Swal.fire({
                            title: '订单已取消',
                            icon: 'success',
                            confirmButtonText: '好的'
                        })
                    </script>
                    {{/if}}
                    {{#if cancelError}}
                    <script>
                        Swal.fire({
                            title: '无法取消',
                            text: '{{cancelError}}',
                            icon: 'error',
                            confirmButtonText: '好的'
                        })
                    </script>
                    {{/if}}

                </div>
            </div>
        </div>
    </section>
</body>
</html>

==================================================
文件路径: src\views\partials\navbar.hbs
文件名: navbar.hbs
文件内容:
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="/static/css/style.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js"></script>
<script src="/static/js/script.js"></script>

<nav class="navbar navbar-expand-lg bg-light fixed-top">
  <div class="container">
    <a class="navbar-brand" href="/"><img src="/static/image/logo.png" style="height:auto;width:130px" alt="Logo"></a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" 
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
        <!-- 首页 -->
        <li class="nav-item">
          <a class="nav-link" href="/">首页</a>
        </li>
        <!-- 菜品 -->
        <li class="nav-item">
          <a class="nav-link" href="/foods/1">浏览菜品</a>
        </li>
        <!-- 购物车 -->
        <li class="nav-item">
          <a class="nav-link" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
            <i class="fas fa-shopping-basket"></i>
            <small class="cart-num"></small>
          </a>
        </li>
        {{#if loginUser}}
        <!-- 如果已登录，展示用户名 -->
        <li class="nav-item">
          <a class="nav-link" href="/dashboard">{{loginUser.name}}</a>
        </li>
        {{else}}
        <!-- 未登录 -->
        <li class="nav-item">
          <a class="nav-link" href="/register">注册</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/login">登录</a>
        </li>
        {{/if}}
      </ul>
    </div>
  </div>
</nav>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- 购物车弹窗 Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">您的购物车</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="关闭"></button>
      </div>
      <div class="modal-body cart-body">
        <!-- 购物车物品通过JS动态渲染 -->
      </div>
      <div class="modal-footer">
        {{#if loginUser}}
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">关闭</button>
        <a href="/user/orderFood" type="button" class="btn btn-primary checkout-btn">去结算</a>
        {{else}}
        <small class="text-danger">请先登录后再进行结算</small>
        {{/if}}
      </div>
    </div>
  </div>
</div>

==================================================
文件路径: src\views\partials\sidebar.hbs
文件名: sidebar.hbs
文件内容:
<div class="sidebar bg-dark text-light p-3" style="min-height:100vh;">
    <div class="text-center my-4">
        <!-- 根据用户类型显示不同菜单 -->
        {{#if (eq loginUser.type 'admin')}}
            <h5>管理员后台</h5>
        {{else if (eq loginUser.type 'employee')}}
            <h5>员工后台</h5>
        {{else}}
            <h5>普通用户</h5>
        {{/if}}
    </div>

    {{#if (eq loginUser.type 'admin')}}
        <div class="mb-3"><a class="text-light" href="/dashboard">仪表盘</a></div>
        <div class="mb-3"><a class="text-light" href="/admin/addDish">添加新菜品</a></div>
        <div class="mb-3"><a class="text-light" href="/admin/dishMenus/1">菜品管理</a></div>
        <div class="mb-3"><a class="text-light" href="/admin/adminOrder/1">订单列表</a></div>
    {{/if}}

    {{#if (eq loginUser.type 'employee')}}
        <div class="mb-3"><a class="text-light" href="/employee/dashboard">仪表盘</a></div>
        <div class="mb-3"><a class="text-light" href="/employee/orders/1">订单管理</a></div>
        <div class="mb-3"><a class="text-light" href="/employee/history/1">历史订单</a></div>
        <div class="mb-3"><a class="text-light" href="/employee/markOutOfStock">库存管理</a></div>
    {{/if}}

    <!-- 如原先存在 manager 角色的条件判断，此处已删除或注释 -->

    <!-- 通用退出按钮 -->
    <div class="mt-5">
        <a class="text-light" href="/logout">退出登录</a>
    </div>
</div>

==================================================
文件路径: src\views\partials\userBar.hbs
文件名: userBar.hbs
文件内容:
<ul class="nav justify-content-center bg-dark p-2 userNavBar">
    <li class="nav-item">
        <a class="nav-link text-light" href="/dashboard">我的主页</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-light" href="/user/orders">当前订单</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-light" href="/user/orderFood">购物车结算</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-light" href="/user/history">历史订单</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-light" href="/user/favourites">我的收藏</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-light" href="/logout">退出登录</a>
    </li>
</ul>

==================================================